[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quartotest",
    "section": "",
    "text": "nginx\n\n\nlinux\n\n\n\n\nJust a collection of my thoughts.\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek-13\n\n\nBig-Idea-3\n\n\n\n\nLesson on Big Idea 3 which includes expressions, strings, psuedocode, and more!\n\n\n\n\n\n\nNov 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek-13\n\n\nBig-Idea-3\n\n\n\n\nLesson on Big Idea 3 which includes expressions, strings, psuedocode, and more!\n\n\n\n\n\n\nNov 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njupyter\n\n\nWeek 13\n\n\n\n\nThe homework assignment and challenge in our lesson plan\n\n\n\n\n\n\nNov 28, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n1.D\n\n\n2.B\n\n\n3.C\n\n\nC4/4\n\n\n\n\nTaking a look at binary abstractions (ASCII, Unicode, Images),logic gates, etc\n\n\n\n\n\n\nNov 14, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 11, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncollegeboard\n\n\n\n\nI only got one wrong.\n\n\n\n\n\n\nNov 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n1.B\n\n\n4.C\n\n\n\n\nPractice with identifying and correcting code blocks\n\n\n\n\n\n\nOct 3, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n1.A\n\n\n5.B\n\n\n5.D\n\n\n\n\nAPIs can be found all over the internet. A great consolidator of many APIs is RapidAPI. In this blog we will use a site to consolidates API stats. Learning a few lines of code and you can start extracting lots of data from the internet via APIs.\n\n\n\n\n\n\nOct 3, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\naws\n\n\nec2\n\n\ndocker\n\n\nlinux\n\n\n\n\ncockpit is a gui to manage linux servers.\n\n\n\n\n\n\nSep 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncollegeboard\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2022\n\n\nmoonpie\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncollegeboard\n\n\n\n\nA set of bash scripts that demonstrate that I have all my tools installed\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n3.B\n\n\n3.C\n\n\nC4.4\n\n\n\n\nA Binary Math illustrative application using HTML, Liquid, and JavaScript.\n\n\n\n\n\n\nJul 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJul 27, 2020\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\njupyter\n\n\n\n\nA tutorial of fastpages for Jupyter notebooks.\n\n\n\n\n\n\nFeb 20, 2020\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "print(\"hello World\")\n\nhello World"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/2020-02-20-test.html",
    "href": "posts/2020-02-20-test.html",
    "title": "Fastpages Notebook Blog Post",
    "section": "",
    "text": "This notebook is a demonstration of some of capabilities of fastpages with notebooks.\nWith fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts!\n\n\nThe first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this:\n# \"My Title\"\n> \"Awesome summary\"\n\n- toc: true\n- branch: master\n- badges: true\n- comments: true\n- author: Hamel Husain & Jeremy Howard\n- categories: [fastpages, jupyter]\n\nSetting toc: true will automatically generate a table of contents\nSetting badges: true will automatically include GitHub and Google Colab links to your notebook.\nSetting comments: true will enable commenting on your blog post, powered by utterances.\n\nThe title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README.\n\n\n\nA #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post.\nA #hide_input comment at the top of any code cell will only hide the input of that cell.\n\n\nThe comment #hide_input was used to hide the code that produced this.\n\n\nput a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:\n\n\nCode\nimport pandas as pd\nimport altair as alt\n\n\nput a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:\n\n\nCode\ncars = 'https://vega.github.io/vega-datasets/data/cars.json'\nmovies = 'https://vega.github.io/vega-datasets/data/movies.json'\nsp500 = 'https://vega.github.io/vega-datasets/data/sp500.csv'\nstocks = 'https://vega.github.io/vega-datasets/data/stocks.csv'\nflights = 'https://vega.github.io/vega-datasets/data/flights-5k.json'\n\n\nplace a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it:\n\n#collapse-output\nprint('The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.')\n\nThe comment #collapse-output was used to collapse the output of this cell by default but you can expand it.\n\n\n\n\n\nCharts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook.\n\n\n\n# single-value selection over [Major_Genre, MPAA_Rating] pairs\n# use specific hard-wired values as the initial selected values\nselection = alt.selection_single(\n    name='Select',\n    fields=['Major_Genre', 'MPAA_Rating'],\n    init={'Major_Genre': 'Drama', 'MPAA_Rating': 'R'},\n    bind={'Major_Genre': alt.binding_select(options=genres), 'MPAA_Rating': alt.binding_radio(options=mpaa)}\n)\n  \n# scatter plot, modify opacity based on selection\nalt.Chart(df).mark_circle().add_selection(\n    selection\n).encode(\n    x='Rotten_Tomatoes_Rating:Q',\n    y='IMDB_Rating:Q',\n    tooltip='Title:N',\n    opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05))\n)\n\n\n\n\n\n\n\n\n\n\n\nalt.Chart(df).mark_circle().add_selection(\n    alt.selection_interval(bind='scales', encodings=['x'])\n).encode(\n    alt.X('Rotten_Tomatoes_Rating', type='quantitative'),\n    alt.Y('IMDB_Rating', type='quantitative', axis=alt.Axis(minExtent=30)),\n#     y=alt.Y('IMDB_Rating:Q', ), # use min extent to stabilize axis title placement\n    tooltip=['Title:N', 'Release_Date:N', 'IMDB_Rating:Q', 'Rotten_Tomatoes_Rating:Q']\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\n\n\n\n# select a point for which to provide details-on-demand\nlabel = alt.selection_single(\n    encodings=['x'], # limit selection to x-axis value\n    on='mouseover',  # select on mouseover events\n    nearest=True,    # select data point nearest the cursor\n    empty='none'     # empty selection includes no data points\n)\n\n# define our base line chart of stock prices\nbase = alt.Chart().mark_line().encode(\n    alt.X('date:T'),\n    alt.Y('price:Q', scale=alt.Scale(type='log')),\n    alt.Color('symbol:N')\n)\n\nalt.layer(\n    base, # base line chart\n    \n    # add a rule mark to serve as a guide line\n    alt.Chart().mark_rule(color='#aaa').encode(\n        x='date:T'\n    ).transform_filter(label),\n    \n    # add circle marks for selected time points, hide unselected points\n    base.mark_circle().encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n\n    # add white stroked text to provide a legible background for labels\n    base.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='price:Q'\n    ).transform_filter(label),\n\n    # add text labels for stock prices\n    base.mark_text(align='left', dx=5, dy=-5).encode(\n        text='price:Q'\n    ).transform_filter(label),\n    \n    data=stocks\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\n\n\nYou can display tables per the usual way in your blog:\n\n# display table with pandas\ndf[['Title', 'Worldwide_Gross', \n    'Production_Budget', 'Distributor', 'MPAA_Rating', 'IMDB_Rating', 'Rotten_Tomatoes_Rating']].head()\n\n\n\n\n\n  \n    \n      \n      Title\n      Worldwide_Gross\n      Production_Budget\n      Distributor\n      MPAA_Rating\n      IMDB_Rating\n      Rotten_Tomatoes_Rating\n    \n  \n  \n    \n      0\n      The Land Girls\n      146083.0\n      8000000.0\n      Gramercy\n      R\n      6.1\n      NaN\n    \n    \n      1\n      First Love, Last Rites\n      10876.0\n      300000.0\n      Strand\n      R\n      6.9\n      NaN\n    \n    \n      2\n      I Married a Strange Person\n      203134.0\n      250000.0\n      Lionsgate\n      None\n      6.8\n      NaN\n    \n    \n      3\n      Let's Talk About Sex\n      373615.0\n      300000.0\n      Fine Line\n      None\n      NaN\n      13.0\n    \n    \n      4\n      Slam\n      1087521.0\n      1000000.0\n      Trimark\n      R\n      3.4\n      62.0\n    \n  \n\n\n\n\n\n\n\n\n\nYou can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax:\n![](my_icons/fastai_logo.png)\n\n\n\n\nRemote images can be included with the following markdown syntax:\n![](https://image.flaticon.com/icons/svg/36/36686.svg)\n\n\n\n\nAnimated Gifs work, too!\n![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif)\n\n\n\n\nYou can include captions with markdown images like this:\n![](https://www.fast.ai/images/fastai_paper/show_batch.png \"Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/\")"
  },
  {
    "objectID": "posts/2020-02-20-test.html#github-flavored-emojis",
    "href": "posts/2020-02-20-test.html#github-flavored-emojis",
    "title": "Fastpages Notebook Blog Post",
    "section": "GitHub Flavored Emojis",
    "text": "GitHub Flavored Emojis\nTyping I give this post two :+1:! will render this:\nI give this post two :+1:!"
  },
  {
    "objectID": "posts/2020-02-20-test.html#tweetcards",
    "href": "posts/2020-02-20-test.html#tweetcards",
    "title": "Fastpages Notebook Blog Post",
    "section": "Tweetcards",
    "text": "Tweetcards\nTyping > twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this:\n\ntwitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20"
  },
  {
    "objectID": "posts/2020-02-20-test.html#youtube-videos",
    "href": "posts/2020-02-20-test.html#youtube-videos",
    "title": "Fastpages Notebook Blog Post",
    "section": "Youtube Videos",
    "text": "Youtube Videos\nTyping > youtube: https://youtu.be/XfoYk_Z5AkI will render this:"
  },
  {
    "objectID": "posts/2020-02-20-test.html#boxes-callouts",
    "href": "posts/2020-02-20-test.html#boxes-callouts",
    "title": "Fastpages Notebook Blog Post",
    "section": "Boxes / Callouts",
    "text": "Boxes / Callouts\nTyping > Warning: There will be no second warning! will render this:\n\n\n\n\n\n\nWarning\n\n\n\nThere will be no second warning!\n\n\nTyping > Important: Pay attention! It's important. will render this:\n\n\n\n\n\n\nImportant\n\n\n\nPay attention! It’s important.\n\n\nTyping > Tip: This is my tip. will render this:\n\n\n\n\n\n\nTip\n\n\n\nThis is my tip.\n\n\nTyping > Note: Take note of this. will render this:\n\n\n\n\n\n\nNote\n\n\n\nTake note of this.\n\n\nTyping > Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs:\n\n\n\n\n\n\nNote\n\n\n\nA doc link to an example website: fast.ai should also work fine."
  },
  {
    "objectID": "posts/2020-02-20-test.html#footnotes",
    "href": "posts/2020-02-20-test.html#footnotes",
    "title": "Fastpages Notebook Blog Post",
    "section": "Footnotes",
    "text": "Footnotes\nYou can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this:\n{% raw %}For example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ 'This is the footnote.' | fndetail: 1 }}\n{{ 'This is the other footnote. You can even have a [link](www.github.com)!' | fndetail: 2 }}{% endraw %}\nFor example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ ‘This is the footnote.’ | fndetail: 1 }} {{ ‘This is the other footnote. You can even have a link!’ | fndetail: 2 }}"
  },
  {
    "objectID": "posts/2020-07-27-hello-world.html",
    "href": "posts/2020-07-27-hello-world.html",
    "title": "Quartotest",
    "section": "",
    "text": "print(\"Hello Nice\")"
  },
  {
    "objectID": "posts/2022-08-22-toolcheck.html",
    "href": "posts/2022-08-22-toolcheck.html",
    "title": "Bash toolcheck",
    "section": "",
    "text": "code --version\n\n1.70.24l\ne4503b30fc78200f846c62cf8091b76ff5547662\nx64\n\n\n: 1\n\n\nCheck for conda\n\nconda --version\n\nconda 4.13.0\n\n\n: 1\n\n\n\nconda --list \n\nusage: conda [-h] [-V] command ...\nconda: error: the following arguments are required: command\n\nNote: you may need to restart the kernel to use updated packages.\n\n\n\njupyter kernelspec list\n\nAvailable kernels:\n  bash          /home/moonpie/.local/share/jupyter/kernels/bash\n  javascript    /home/moonpie/.local/share/jupyter/kernels/javascript\n  python3       /home/moonpie/.local/share/jupyter/kernels/python3\n\n\n: 1\n\n\n\npython --version # python 3 version\n\nPython 3.10.6\n\n\n: 1\n\n\n\npython2 --version # python 2 version\n\nPython 2.7.18\n\n\n: 1"
  },
  {
    "objectID": "posts/2022-08-26-pythonquiz.html",
    "href": "posts/2022-08-26-pythonquiz.html",
    "title": "Football Quiz",
    "section": "",
    "text": "Explanation\nMy code is much simpler than the example given. By using what is called a for loop, I can repeat the same actions or lines of code (with different inputs) allowing me to have to not type as much. The other thing I am taking advantage of is a list. In python, a list is basically a way to store multiple values.\nThe syntax of a for loop is for i in j\ni is a variable, one which starts at 0 and gets added to until it reaches j. The program runs what is in the for function once, then adds to i, and then repeats until i reaches j. For loops exist in lots of programming languages.\nHowever, I did something special. I created a list called questions, which can store as many questions as I want. I also created a list called answers, which stores anwsers. The for q in questions doesn’t just behave like a normal for loop, the q is not a variable, but rather an item in the list. The function goes through the list with different items.\nIn addition to that, I set a variable called a. a is used to call on a specific item in the list answers, one that matches the question. By adding 1 to a at the end of the for loop, I can make sure the item called from questions matches with that of answers.\nBecause of my genius intelligence, I was able to create quiz, that is infinitely extendable. You simply add more items to the list of questions and answers, and more questions and answers will be added. No programming necessary. In addition to that, it also gives a fraction score.\n\nquestions = [[\"Is Jeffrey the Smartest person alive\", \"yes\"], [\"How many players are there on a football team?\", \"11\"]]\ngrade = 0\nfor q in questions:\n    a = input(q[0])\n    if a == q[1]:\n        print(\"Correct\")\n        grade +=1\n    else:\n        print(\"Incorrect\")\n\nprint(\"%\",(grade / len(questions) * 100))\n\nCorrect\nCorrect\n% 100.0"
  },
  {
    "objectID": "posts/2022-9-01-dictionaries.html",
    "href": "posts/2022-9-01-dictionaries.html",
    "title": "Fun with dictionaries",
    "section": "",
    "text": "players = []\nplayers.append({\n    \"name\": \"Khalid Farah\",\n    \"weight\": 195, #Weight is in pounds\n    \"positions\": [\"linebacker\"]\n})\n\nplayers.append({\n    \"name\": \"Jeffrey Fonseca\",\n    \"weight\": 200,\n    \"positions\": [\"Offensive lineman\", \"Defensive Lineman\"]\n})\n\nfor p in players:\n    print(p[\"name\"], \"\\n\")\n\n# technically, this is all I need to complete the assignment. However, I may do more.\n\nKhalid Farah \n\nJeffrey Fonseca \n\n\n\n\na = input(\"Which player's stats do you want?\")\nfor p in players:\n    if p[\"name\"] == a:\n        print(\"weight = \",p[\"weight\"],\"pounds \\n\")\n        print(\"Positions played:\", p[\"positions\"])\n\nweight =  195 pounds \n\nPositions played: ['linebacker']\n\n\n\ndict = {}\ndict.update({\"test\":\"value\"})\nprint(dict)\n\n# finally got this working. Why was this so difficult to figure out.\n\n{'test': 'value'}\n\n\n\npindex = {}\n\nfor p in players:\n    pindex.update({p[\"name\"]: p})\n\nprint(pindex)\n\n# This program creates an index for the list,to make searching faster. \n\n{'Khalid Farah': {'name': 'Khalid Farah', 'weight': 195, 'positions': ['linebacker']}, 'Jeffrey Fonseca': {'name': 'Jeffrey Fonseca', 'weight': 200, 'positions': ['Offensive lineman', 'Defensive Lineman']}}\n\n\n\n# I can recreate the above program  (playerinfo) without the for loop,just call on the index. \n# Right now there is no speed difference, but when working with bigger stores of info, for loops through are tedious\n\na = input(\"player name?\")\n\nprint(\"weight=\",pindex[a][\"weight\"],\"pounds\\n\")\nprint(\"positions=\",pindex[a][\"positions\"])\n\n# maybe creating dictionary of dictionaries would have been easier...\n\nweight= 200 pounds\n\npositions= ['Offensive lineman', 'Defensive Lineman']"
  },
  {
    "objectID": "posts/2022-09-28-javascript tutorial.html",
    "href": "posts/2022-09-28-javascript tutorial.html",
    "title": "Quartotest",
    "section": "",
    "text": "Javascipt is another programming language. Just like python, it has variables, functions, iterations, just sometimes in different forms.\n\n// Javascript works with arrays rather than lists. They are basically the same thing, besides the name. \nvar students = [ \n    new Person(\"Anthony\", \"tonyhieu\", 2022),\n    new Person(\"Bria\", \"B-G101\", 2023),\n    new Person(\"Allie\", \"xiaoa0\", 2023),\n    new Person(\"Tigran\", \"Tigran7\", 2023),\n    new Person(\"Rebecca\", \"Rebecca-123\", 2023),\n    new Person(\"Vidhi\", \"unknown\", 2024)\n\n\n// json is a file format used to transport data from one program to another, even if those programs are in different languages. \n\n// define a classroom and build Classroom objects and json\nfunction Classroom(teacher, students){ // 1 teacher, many student\n    // start Classroom with Teacher\n    teacher.setRole(\"Teacher\");\n    this.teacher = teacher;\n    this.classroom = [teacher];\n    // add each Student to Classroom\n    this.students = students;\n    this.students.forEach(student => { student.setRole(\"Student\"); this.classroom.push(student); });\n    // build json/string format of Classroom\n    this.json = [];\n    this.classroom.forEach(person => this.json.push(person.toJSON()));\n}\n\n// make a CompSci classroom from formerly defined teacher and students\ncompsci = new Classroom(teacher, students);\n\n// output of Objects and JSON in CompSci classroom\nlogItType(compsci.classroom);  // constructed classroom object\nlogItType(compsci.classroom[0].name);  // abstract 1st objects name\nlogItType(compsci.json[0]);  // show json conversion of 1st object to string\nlogItType(JSON.parse(compsci.json[0]));  // show JSON.parse inverse of JSON.stringify"
  },
  {
    "objectID": "posts/2022-10-03-ap-error_testing.html",
    "href": "posts/2022-10-03-ap-error_testing.html",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "",
    "text": "College Board Big Idea 1"
  },
  {
    "objectID": "posts/2022-10-03-ap-error_testing.html#identifying-and-correcting-errors-unit-1.4",
    "href": "posts/2022-10-03-ap-error_testing.html#identifying-and-correcting-errors-unit-1.4",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "Identifying and Correcting Errors (Unit 1.4)",
    "text": "Identifying and Correcting Errors (Unit 1.4)\n\nBecome familiar with types of errors and strategies to fixing them - Lightly Review Videos and take notes on topics with Blog - Complete assigned MCQ questions"
  },
  {
    "objectID": "posts/2022-10-03-ap-error_testing.html#hacks",
    "href": "posts/2022-10-03-ap-error_testing.html#hacks",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "Hacks",
    "text": "Hacks\n\nNow is a good time to think about Testing of your teams final project… - What errors may arise in your project? - What are some test cases that can be used? - Make sure to document any bugs you encounter and how you solved the problem. - What are “single” tests that you will perform on your project? Or, your part of the project? * As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests."
  },
  {
    "objectID": "posts/2022-10-03-pbl-python_rapidapi.html",
    "href": "posts/2022-10-03-pbl-python_rapidapi.html",
    "title": "Python RapidAPI",
    "section": "",
    "text": "APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information…"
  },
  {
    "objectID": "posts/2022-10-03-pbl-python_rapidapi.html#hacks",
    "href": "posts/2022-10-03-pbl-python_rapidapi.html#hacks",
    "title": "Python RapidAPI",
    "section": "Hacks",
    "text": "Hacks\n\nFind and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way.\n- RapidAPI - GitHub Project - No Key APIs Article - Twitter Developer - Google Developer - Reddit Developer\n\n\nShow API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk."
  },
  {
    "objectID": "posts/2022-10-09-stocks api fun.html",
    "href": "posts/2022-10-09-stocks api fun.html",
    "title": "Quartotest",
    "section": "",
    "text": "Becuase of our unorthodox choice of api, before running, you must install the required library:\npip install polygon-api-client\n\n# libraries\n\nfrom polygon import RESTClient\nfrom typing import cast\nfrom urllib3 import HTTPResponse\n\n# API key for the stocks\n\nclient = RESTClient(\"4smt0M_ePY6rylHRcP5t3v3pa7WS_pB9\") # api key in quotes \n\n\n\nstr = input(\"What stock would you like?\")\ndate = input(\"Date? (Please formate it in as YYYY-MM-DD\")\nprint(date)\ndata = client.get_daily_open_close_agg(str, date)\n\n\nprint(data)\n\nprint(data.symbol)\n\nprint(data.open)\n\n2022-10-10\nDailyOpenCloseAgg(after_hours=140.92, close=140.42, from_='2022-10-10', high=141.89, low=138.5729, open=140.42, pre_market=139.95, status='OK', symbol='AAPL', volume=74899002.0, otc=None)\nAAPL\n140.42\n\n\n\nfrom polygon import RESTClient\n\naggs = client.get_aggs(\"AAPL\", 1, \"day\", \"2022-10-12\", \"2022-04-04\")\nprint(aggs)\n\n[Agg(open=174.57, high=178.49, low=174.44, close=178.44, volume=76545983.0, vwap=177.4855, timestamp=1649044800000, transactions=630374, otc=None)]"
  },
  {
    "objectID": "posts/2022-09-30-cockpitsetup.html",
    "href": "posts/2022-09-30-cockpitsetup.html",
    "title": "Setting up cockpit",
    "section": "",
    "text": "The installation process\nThe installation process is simple:\nsudo apt install cockpit\nTo start the server, run:\nsudo systemctl enable --now cockpit\nThis sets the cockpit server to start on boot, and it starts it now.\nHowever, the firewall must open ports to allow the cockpit server through. This opens the default ports for the cockpit server. It should be noted that not every version fo linux uses ufw as a firewall, some use other firewalls with different management commands.\nsudo ufw allow 9090\nAnother important thing is to set the password for the default “ubuntu” user account so that you can login to cockpit.\nsudo passwd ubuntu\nIt will ask for the new password twice, not showing what you are typing.\nReboot the computer for the server to start properly, however, this won’t work as the virtual private cloud must have its ports open. I had to do this when I set up cockpit on my Oracle server, so I knew the gist of the steps.\n\n\nOpening EC2’s VPC ports (Also necessary if you want to host servers on ports other than 22, 80, or 443)\nFirst, go to your EC2 vps, where you would normally click connect from, and click on the link under vpc:\n\nThis should bring you up to a screen like this:\n\nClick the security tab, bringing you to a screen like this:\n\nAnd then click on security groups, bringing you to a screen like this:\n\nAnd then click on the “edit inbound rules”\nFinally, you should get something like this:\n\nAdd an item that matches what I have in the third row. That opens the port to allow cockpits server to escape. You may also need to use this page to open other ports if you are hosting servers on nonstandard ports."
  },
  {
    "objectID": "posts/2022-11-2-Night at the meseum.html",
    "href": "posts/2022-11-2-Night at the meseum.html",
    "title": "Night at the Meseum!",
    "section": "",
    "text": "server {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_name your.domain.com; # replace with your actual domain\n\n        location / { \n                # Upgrade WebSockets\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection 'Upgrade';\n                # Increase header buffer\n                proxy_connect_timeout 10; \n                proxy_send_timeout 90; \n                proxy_read_timeout 90; \n                proxy_buffer_size 128k;\n                proxy_buffers 4 256k;\n                proxy_busy_buffers_size 256k;\n                proxy_temp_file_write_size 256k;\n                proxy_pass http://127.0.0.1:8080; # change port\n            }\n        }\nThis is what I used. It’s similar to the config provided by Mr. Mortenssen, except with stuff added to make websockets work. It works with certbot as well, so I had websockets and ssl on my website.\nOther than that, I saw a lot of cool projects."
  },
  {
    "objectID": "posts/2022-11-10-finalcorrections.html",
    "href": "posts/2022-11-10-finalcorrections.html",
    "title": "Final Exam corrections",
    "section": "",
    "text": "Things I had to google:\nI actually did have to google something, only one thing. On one of the internet questions, I had to google whether or not packets could be in order, which is not the case. Packets can be an any order, even TCP packets (I had incorrectly thought TCP packets had to be in order)."
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html",
    "href": "posts/2022-11-14-AP-binary_logic.html",
    "title": "Binary Logic and Abstraction",
    "section": "",
    "text": "Algorithms, Data and Data Structures go together. It is required to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be your data topic!!! Use a data topic as you learn algorithms and programming. - Explore that topic in Computer Science manner (research, jupyter notebooks, frontend / backend coding) - Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. - Teach with examples… Segment from CS50 and go to minute 13:15. - Tour the Code. Use Binary Frontend Code to get you started. Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug - This Tech Talk will finish by reviewing hacks, the remainder of this blog and Binary Frontend Code is part of your research."
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#math-in-binary",
    "href": "posts/2022-11-14-AP-binary_logic.html#math-in-binary",
    "title": "Binary Logic and Abstraction",
    "section": "Math in Binary",
    "text": "Math in Binary\n\nLearn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on w3schools\n\n\nLogic of Shift\n\nExplore right and left shifts with binary numbers.\n- In an arithmetic shift, the bits that are shifted out of either end are discarded. - In a left arithmetic shift, zeros are shifted in on the right. \n\n\n\nUnderstand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2)\n\nHow does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. - This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. - Most Significant Bit (MSB), least (LSB) - This example shows negative and positive numbers, using technique called Twos Complement. - In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. - In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study. \n\n\n\nUI Concept/Design\n\nConceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. - n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n) - Add buttons for “<<” and ” >>”"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#ascii-and-unicode",
    "href": "posts/2022-11-14-AP-binary_logic.html#ascii-and-unicode",
    "title": "Binary Logic and Abstraction",
    "section": "ASCII and Unicode",
    "text": "ASCII and Unicode\n\nComputers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂\n\n\nCharacter Data Abstraction\n\nHow are characters stored? How many bits do they take?\n- ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. - Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. - ASCII - 7 bits, extended to 8 bits with Unicode - UTF-8 - UTF-16 - UTF-32  Sample of Unicode characters.\n\n\n\nUI Concept/Design\n\nThe ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type:  Original ASCII"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#color-codes",
    "href": "posts/2022-11-14-AP-binary_logic.html#color-codes",
    "title": "Binary Logic and Abstraction",
    "section": "Color Codes",
    "text": "Color Codes\n\nPixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. - Monitors - 1280 x 1024 Super-eXtended Graphics Array (SXGA) - 1366 x 768 High Definition (HD) - 1600 x 900 High Definition Plus (HD+) - 1920 x 1080 Full High Definition (FHD) - 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) - TVs - 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … - 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … - 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. - Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704|\n|5.0|2592 x 1944|\n|7.1|3072 x 2304|\n|8.0|3264 x 2448| |10.0|3648 x 2736|\n|12.1|4000 x 3000|\n|14.7|4416 x 3312|\n|21.0|5616 x 3744|\n\n\nA Color code is a 24 bit abstraction.\n\nThere are 8 bits for Red, 8 bits for Blue, and 8 bits for Green.\n\n|Name|Hex Code|RGB Code| |Black|#000000|rgb(0, 0, 0)| |Red|#FF0000|rgb(255, 0, 0)| |Maroon|#800000|rgb(128, 0, 0)| |Yellow|#FFFF00|rgb(255, 255, 0)|\n 255  255 * 255 combinations of R, G, B*\n\n\nUI Design\n\nHere is a sample program a student used to visualize color by turning buttons on and off.  by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#logic-gates",
    "href": "posts/2022-11-14-AP-binary_logic.html#logic-gates",
    "title": "Binary Logic and Abstraction",
    "section": "Logic Gates",
    "text": "Logic Gates\n\nThe fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables.\n\n\nLogic Gates can be simulated with 2 bits\nLook for bitwise operators on w3schools\n\n\nUI Concept\n\nVisual concept of logic gates - Establish check boxes for A / B on and off - Show result of Boolean Expression using Gate visual  Logic Gates\n\n\n\nUI Design\n\nLogic gate lab in JavaScript  by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result\n\n\n\nLogic of Logic Gates\n\nA logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). - There are four possible inputs: - 0 0 - 0 1 - 1 0 - 1 1 - Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). - AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 - OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 - XOR is true for 0 1, 1 0\n\n\n\nPractical Application\n\nLogic gates are used everywhere"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#unsigned-addition",
    "href": "posts/2022-11-14-AP-binary_logic.html#unsigned-addition",
    "title": "Binary Logic and Abstraction",
    "section": "Unsigned Addition",
    "text": "Unsigned Addition\nHere we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits.\n\nInitial UI Implementation\n Action buttons for +1 and -1 Additional actions for Turn On and Turn Off\n\n\nUnsigned Addition"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#signed-addition",
    "href": "posts/2022-11-14-AP-binary_logic.html#signed-addition",
    "title": "Binary Logic and Abstraction",
    "section": "Signed Addition",
    "text": "Signed Addition\nIntegers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign.\n\nCommon concept for Integer Math\n Positive number\n\n\nBasic concept, but not typically used\n Negative number\n\n\nInverting numbers, twos complement\n Two’s complement allows adding for signed and unsigned numbers\nBasic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. >> and >>> have been adapted to handle signed and zero filled shifting."
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#technical-helpers",
    "href": "posts/2022-11-14-AP-binary_logic.html#technical-helpers",
    "title": "Binary Logic and Abstraction",
    "section": "Technical helpers",
    "text": "Technical helpers\n\nHarvard CS50 minute 0 to minute 50 to provide background on some of the information below.\n\n\nAlgorithm in Jinja2 to limit Bits per row\n 8 images per row by Kylie Scharf Modulo 8 algorithm add\n\nfor every eight bits (code).\n\n\nResearch Helpers\nCHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#hacks",
    "href": "posts/2022-11-14-AP-binary_logic.html#hacks",
    "title": "Binary Logic and Abstraction",
    "section": "Hacks",
    "text": "Hacks\n\nData, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. - Use data abstraction (ie data structures) in your lesson - Make sure you teach/learn elements from this blog as you learn algorithms - Add “Science” into your process (research, jupyter notebook, and ultimately running application) - Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher. The topics above focus on data ideas from Unit 2 of AP Classroom."
  },
  {
    "objectID": "posts/2022-07-07-PBL-binary.html",
    "href": "posts/2022-07-07-PBL-binary.html",
    "title": "Binary Math",
    "section": "",
    "text": "<header class=\"pb-3 mb-4 border-bottom border-primary text-dark\">\n    <span class=\"fs-4\">Binary Math with Conversions</span>\n</header>\n<div class=\"row justify-content-md-center\">\n    <div class=\"col-8\">\n        <table class=\"table\">\n        <tr id=\"table\">\n            <th>Plus</th>\n            <th>Binary</th>\n            <th>Octal</th>\n            <th>Hexadecimal</th>\n            <th>Decimal</th>\n            <th>Minus</th>\n        </tr>\n        <tr>\n            <td><button type=\"button\" id=\"add1\" onclick=\"add(1)\">+1</button></td>\n            <td id=\"binary\">00000000</td>\n            <td id=\"octal\">0</td>\n            <td id=\"hexadecimal\">0</td>\n            <td id=\"decimal\">0</td>\n            <td><button type=\"button\" id=\"sub1\" onclick=\"add(-1)\">-1</button></td>\n        </tr>\n        </table>\n    </div>\n    <div class=\"col-12\">\n        {% comment %}Liquid for loop includes last number, thus the Minus{% endcomment %}\n        {% assign bits = BITS | minus: 1 %} \n        <table class=\"table\">\n        <tr>\n            {% comment %}Build many bits{% endcomment %}\n            {% for i in (0..bits) %}\n            <td><img class=\"img-responsive py-3\" id=\"bulb{{ i }}\" src=\"{{site.baseurl}}/images/bulb_off.png\" alt=\"\" width=\"40\" height=\"Auto\">\n                <button type=\"button\" id=\"butt{{ i }}\" onclick=\"javascript:toggleBit({{ i }})\">Turn on</button>\n            </td>\n            {% endfor %}\n        </tr>\n        <tr>\n            {% comment %}Value of bit{% endcomment %}\n            {% for i in (0..bits) %}\n            <td><input type='text' id=\"digit{{ i }}\" Value=\"0\" size=\"1\" readonly></td>\n            {% endfor %}\n        </tr>\n        </table>\n    </div>\n</div>"
  },
  {
    "objectID": "posts/2022-11-28-1-2 lesson homework copy.html",
    "href": "posts/2022-11-28-1-2 lesson homework copy.html",
    "title": "Challenge and Homework",
    "section": "",
    "text": "The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values.\n\ndata = [104, 101, 4, 105, 308, 103, 5, 107,\n        100, 306, 106, 102, 108]    # list of the different numerical values\nmin_valid = 100  # minimum value\nmax_valid = 200  # maximum value\n\n\nprint(\"The format out put is number:place in list. It should be noted that lists in python start at 0. \\n\")\n\na = 0\nfor number in data:\n    if number < min_valid or number > max_valid:\n        print(number,\":\",a)\n    a +=1\n\n\nThe format out put is number:place in list. It should be noted that lists in python start at 0. \n\n4 : 2\n308 : 4\n5 : 6\n306 : 9"
  },
  {
    "objectID": "posts/2022-11-28-1-2 lesson homework copy.html#homeworkhacks",
    "href": "posts/2022-11-28-1-2 lesson homework copy.html#homeworkhacks",
    "title": "Challenge and Homework",
    "section": "Homework/Hacks",
    "text": "Homework/Hacks\nThe list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing _______ based on which song was chosen using the numbers inputted by the user that corresponds to each song.\n\nalbums = [\n    (\"Welcome to my Nightmare\", \"Alice Cooper\", 1975,   # First album list\n     [\n         (1, \"Welcome to my Nightmare\"),\n         (2, \"Devil's Food\"),\n         (3, \"The Black Widow\"),\n         (4, \"Some Folks\"),\n         (5, \"Only Women Bleed\"),\n     ]\n     ),\n    (\"Bad Company\", \"Bad Company\", 1974,   # Second album list\n     [\n         (1, \"Can't Get Enough\"),\n         (2, \"Rock Steady\"),\n         (3, \"Ready for Love\"),\n         (4, \"Don't Let Me Down\"),\n         (5, \"Bad Company\"),\n         (6, \"The Way I Choose\"),\n         (7, \"Movin' On\"),\n         (8, \"Seagull\"),\n     ]\n     ),\n    (\"Nightflight\", \"Budgie\", 1981,\n     [\n         (1, \"I Turned to Stone\"),\n         (2, \"Keeping a Rendezvous\"),\n         (3, \"Reaper of the Glory\"),\n         (4, \"She Used Me Up\"),\n     ]\n     ),\n    (\"More Mayhem\", \"Imelda May\", 2011,\n     [\n         (1, \"Pulling the Rug\"),\n         (2, \"Psycho\"),\n         (3, \"Mayhem\"),\n         (4, \"Kentish Town Waltz\"),\n     ]\n     ),\n]\n\n\na = 0\nfor al in albums:\n    print(a+1,\":\", albums[a][0])\n    a += 1\nsel = int(input(\"make your selection\")) - 1\nprint(albums[sel][3])\nsel2 = int(input(\"select a song:\")) - 1\nprint(\"Now playing\",albums[sel][3][sel2][1])\n\n1 : Welcome to my Nightmare\n2 : Bad Company\n3 : Nightflight\n4 : More Mayhem\n[(1, \"Can't Get Enough\"), (2, 'Rock Steady'), (3, 'Ready for Love'), (4, \"Don't Let Me Down\"), (5, 'Bad Company'), (6, 'The Way I Choose'), (7, \"Movin' On\"), (8, 'Seagull')]\nNow playing Rock Steady\n\n\n\n1\n1\nPlaying \"Welcome to my Nightmare\"\n\n2\n2\nPlaying \"Rock Steady\""
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw copy.html",
    "href": "posts/2022-11-29-3-4 lessson hw copy.html",
    "title": "Big idea 3!",
    "section": "",
    "text": "the symbol for exponent is **\nthe symbol for addition is ____\nthe symbol for subtraction is ____\nthe symbol for multiplication is ____\nthe symbol for division is ____\nthe symbol for modulus is ____\nan algorithm is ___\nSequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. 1. divide value1 by 10(value1 = 5)\n2. multiply 2 from the result of the step 1\n3. subtract 4 from the result of the step 2 4. print the result of step 3\n\nvalue1 = 5\nvalue2 = value1 ? 1 #step 1\nvalue3 = value2 ? 2 #step 2\nvalue4 = value3 ? 6 #step 3\nprint(value4)\n\nSelection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3.\nHint: use the MOD operator (a % b) to find the remainder when a is divided by b.\n\nnumlist = [\"3\",\"4\",\"9\",\"76\",\"891\"]\nfor i in numlist:\n    if int(i) % 3 == 0:\n        print(int(i),\" is divisible by 3\")\n        continue\n    else:\n        print(i,\"is not divisible by 3\")\n        continue\n            \n\n3  is divisible by 3\n4 is not divisible by 3\n9  is divisible by 3\n76 is not divisible by 3\n891  is divisible by 3\n\n\nHomework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html.\n\nbinary = 0000\n\n\n\nbinary = []\nnum2 = 0\nnumber = int(input(\"Enter a number 1 - 255\"))\ni = 0\nfor i in 10:\n    if 2**i < number:\n        continue\n    else:\n        num2 = number - 2**(i-1)\n        break\n\nprint(num2)\n\nTypeError: 'int' object is not iterable\n\n\n\nnumber = int(input(\"Enter a number 1 - 255\"))\nprint(bin(number))\n\n0b10"
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw copy.html#stringsshow-video-1",
    "href": "posts/2022-11-29-3-4 lessson hw copy.html#stringsshow-video-1",
    "title": "Big idea 3!",
    "section": "3.4 Strings(Show video 1)",
    "text": "3.4 Strings(Show video 1)\n\nVocab: fill in the blanks using the video\nIndex is a number representing a position, like a character’s position in a string or a string’s position in a list.\nConcatenation is combining two strings\nLength is len()\nA substring is part of a string, string[num:num]\n\n\nWhat is psuedocode?\nPseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts.\nCan you think of some benefits of using pseudocode prior to writing out the actual code?\n\nChoose an everyday activity\nImagine that you are providing instructions for this activity to a person who has never done it before\nChallenge someone to do the steps you wrote out\n\nEx. Brushing Teeth\n\nPick up your toothbrush\nRinse toothbrush\nPick up toothpaste\nPlace toothpaste on the toothbrush\nRinse toothbrush again\nBrush teeth in a circular motion\nSpit\nWash mouth\nRinse toothbrush\nYou have brushed your teeth!\n\n\n\nSubstring/Length Practice: change the print functions to print “hello”, “bye”, and the string length\n\n#substring = string[start:end] \n#the substring will have the characters including the index \"start\" to the character BEFORE the index \"end\"\n#len(string) will print the length of string\n\nstring = \"hellobye\"\nprint(string[0:5])\nprint(string[5:9])\n\nhello\nbye\n\n\nConcatenation Practice: combine string1 and string2 to make string3, then print string3.\n\n#string1 + string2 will add string2 to the end of string1\n\nstring1 = \"computer\"\nstring2 = \"science\"\nstring3 = string1 + string2\nprint(string3)\n\ncomputerscience\n\n\nHomework/List Adaptation: create a function that prints the name of each string in the list and the string’s length. Challenge: add frontend with javascript or html.\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\n3\n\n\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\ndef length(list):\n    for n in names:\n        print(n)\n        print(\"Length =\",len(n))\n\nlength(names)\n\njaden\nLength = 5\nmax\nLength = 3\ndylan\nLength = 5\norlando\nLength = 7"
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw.html",
    "href": "posts/2022-11-29-3-4 lessson hw.html",
    "title": "Big idea 3!",
    "section": "",
    "text": "the symbol for exponent is **\nthe symbol for addition is ____\nthe symbol for subtraction is ____\nthe symbol for multiplication is ____\nthe symbol for division is ____\nthe symbol for modulus is ____\nan algorithm is ___\nSequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. 1. divide value1 by 10(value1 = 5)\n2. multiply 2 from the result of the step 1\n3. subtract 4 from the result of the step 2 4. print the result of step 3\n\nvalue1 = 5\nvalue2 = value1 / 10 1 #step 1\nvalue3 = value2 * 2 #step 2\nvalue4 = value3 - 4 6 #step 3\nprint(value4)\n\nSelection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3.\nHint: use the MOD operator (a % b) to find the remainder when a is divided by b.\n\nnumlist = [\"3\",\"4\",\"9\",\"76\",\"891\"]\nfor i in numlist:\n    if int(i) % 3 == 0:\n        print(int(i),\" is divisible by 3\")\n        continue\n    else:\n        print(i,\"is not divisible by 3\")\n        continue\n            \n\n3  is divisible by 3\n4 is not divisible by 3\n9  is divisible by 3\n76 is not divisible by 3\n891  is divisible by 3\n\n\nHomework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html.\n\nbinary = 0000\n\n\nbin x = 0b000   \na = 0 \nnumber = int(input(\"Enter a number 1 - 255\"))\nfor l in binary:\n    if (2**a-2**(a-1)) < number:\n        print(\"something\")\n    else:\n        print(2**a)\n    a += 1\n\nsomething\nsomething\nsomething\nsomething\n\n\n\nnumber = int(input(\"Enter a number 1 - 255\"))\nprint(bin(number))\n\n0b10"
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw.html#stringsshow-video-1",
    "href": "posts/2022-11-29-3-4 lessson hw.html#stringsshow-video-1",
    "title": "Big idea 3!",
    "section": "3.4 Strings(Show video 1)",
    "text": "3.4 Strings(Show video 1)\n\nVocab: fill in the blanks using the video\nIndex is a number representing a position, like a character’s position in a string or a string’s position in a list.\nConcatenation is combining two strings\nLength is len()\nA substring is part of a string, string[num:num]\n\n\nWhat is psuedocode?\nPseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts.\nCan you think of some benefits of using pseudocode prior to writing out the actual code?\n\nChoose an everyday activity\nImagine that you are providing instructions for this activity to a person who has never done it before\nChallenge someone to do the steps you wrote out\n\nEx. Brushing Teeth\n\nPick up your toothbrush\nRinse toothbrush\nPick up toothpaste\nPlace toothpaste on the toothbrush\nRinse toothbrush again\nBrush teeth in a circular motion\nSpit\nWash mouth\nRinse toothbrush\nYou have brushed your teeth!\n\n\n\nSubstring/Length Practice: change the print functions to print “hello”, “bye”, and the string length\n\n#substring = string[start:end] \n#the substring will have the characters including the index \"start\" to the character BEFORE the index \"end\"\n#len(string) will print the length of string\n\nstring = \"hellobye\"\nprint(string[0:5])\nprint(string[5:9])\n\nhello\nbye\n\n\nConcatenation Practice: combine string1 and string2 to make string3, then print string3.\n\n#string1 + string2 will add string2 to the end of string1\n\nstring1 = \"computer\"\nstring2 = \"science\"\nstring3 = string1 + string2\nprint(string3)\n\ncomputerscience\n\n\nHomework/List Adaptation: create a function that prints the name of each string in the list and the string’s length. Challenge: add frontend with javascript or html.\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\n3\n\n\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\ndef length(list):\n    for n in names:\n        print(n)\n        print(\"Length =\",len(n))\n\nlength(names)\n\njaden\nLength = 5\nmax\nLength = 3\ndylan\nLength = 5\norlando\nLength = 7"
  }
]