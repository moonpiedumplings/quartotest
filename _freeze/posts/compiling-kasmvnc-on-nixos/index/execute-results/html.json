{
  "hash": "b4127e75567eb43f0ae5fa835454d427",
  "result": {
    "markdown": "---\ntitle: \"Compiling KasmVNC on NixOS\"\ndate: \"2023-5-2\"\ncategories: [linux, devops, nix, kasm]\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-block-background: true\nexecute:\n  freeze: auto\n---\n\nThis is a living document, for the time being. Rather than a complete blogpost, this is a tracker of my progress, as well as a quick reference I can come back to.\n\n# What is this?\n\nKasmweb is a software to create remote desktops, that exist within docker containers, and allow users to access them, all from a browser based GUI.\n\nKasmvnc is the VNC server part of kasm web, a custom fork of previous existing features, enhanced with more performance, and most importantly, a web native setup. Incompatible with existing VNC protocols, the only way to access Kasmvnc is through the http/https serive it offers, the web based VNC ui.\n\nKasmVNC is an amazing piece of software, but development for it is not truly, fully public. This is present in their build system. Their build system is a series of bash scripts, that call docker containers, which call more bash scripts, to finally compile the software, and package it, all in one.\n\nAs part of the scripts they have to compile kasm, lots of static linking happens. They do this because not all distros package the most updated, performant versions of the libraries that kasmvnc uses.\n\nBut Nixos, the distro I want to package KasmVNC for, does. In addition to that, it is completely incompatible with the hacked together build system that kasm uses. In order to package KasmVNC for Nixos, I must reverse engineer their build system, and bit by bit, port it to NixOS.\n\n# Nixos Build System\n\nHow the nixos build system works. I will do later, but here I will document, step by step, how nixos builds a package.\n\n# KasmVNC's Build System\n\nReverse engineering KasmVNC's build system.\n\nThe below is what I neeed for the compiliation commands to work. I don't know where Kasm runs these commands, or similar equivalents, this is just what I've figured out.\n\nPerhaps I need to only run `make` in the KasmVNC/unix directory?\n\n``` {.default .code-overflow-wrap}\n\ngit clone https://github.com/TigerVNC/tigervnc\n\ncd tigervnc\n\ngit clone https://github.com/kasmtech/KasmVNC\n\ncd KasmVNC\n\ncp ..vncserver .vncserver # this sets up build environment. I will still need to check if every single one of these things are necessary, but this works for now\n```\n\nThe build script can be found [here](https://github.com/kasmtech/KasmVNC/blob/4d3a9b749adfcf89bde0b970c1c37481c92d585b/builder/build.sh#L63)\n\nBut from this build script, I don't think all of it is necessary. Below, I will extract what commands are actually needed, from all the fluff, cruft, and hacks.\n\n``` {.default .code-overflow-wrap}\n\ncmake -D CMAKE_BUILD_TYPE=RelWithDebInfo . -DBUILD_VIEWER:BOOL=OFF \\\n  -DENABLE_GNUTLS:BOOL=OFF\n\nmake\n```\n\nBuilds end up in `KasmVNC/unix/`\n\nExcept the preliminary builds don't work. They error:\n\n``` {.default .code-overflow-wrap}\n~/vscode/tigervnc/KasmVNC/unix master ?1 ❯ ./vncserver \n\nCan't locate List/MoreUtils.pm in @INC (you may need to install the List::MoreUtils module) (@INC contains: /usr/lib/perl5/5.36/site_perl /usr/share/perl5/site_perl /usr/lib/perl5/5.36/vendor_perl /usr/share/perl5/vendor_perl /usr/lib/perl5/5.36/core_perl /usr/share/perl5/core_perl) at ./vncserver line 38.\nBEGIN failed--compilation aborted at ./vncserver line 38.\n```\n\nThe above is probably because a perl library is missing. After attempting to install the missing library using `pacman -S perl-list-moreutils` I get a different error.\n\n``` {.default .code-overflow-wrap}\n\n~/vscode/tigervnc/KasmVNC/unix master ?1 ❯ ./vncserver \n\nCan't locate KasmVNC/CliOption.pm in @INC (you may need to install the KasmVNC::CliOption module) (@INC contains: /usr/lib/perl5/5.36/site_perl /usr/share/perl5/site_perl /usr/lib/perl5/5.36/vendor_perl /usr/share/perl5/vendor_perl /usr/lib/perl5/5.36/core_perl /usr/share/perl5/core_perl) at ./vncserver line 42.\nBEGIN failed--compilation aborted at ./vncserver line 42.\n```\n\nObviously, this won't work. I must figure out why KasmVNC pacakges perl packages, where it puts them by default, and how to package them for Nix.\n\nAlright, the vncserver command appears to be in the git repo, and rather than being a binary, it is a perl wrapper script to start an xvnc server. from the script:\n\n``` {.perl .code-overflow-wrap}\nuse KasmVNC::CliOption;\nuse KasmVNC::ConfigKey;\nuse KasmVNC::PatternValidator;\nuse KasmVNC::EnumValidator;\nuse KasmVNC::Config;\nuse KasmVNC::Users;\nuse KasmVNC::TextOption;\nuse KasmVNC::TextUI;\nuse KasmVNC::Utils;\nuse KasmVNC::Logger;\n```\n\nThese perl modules/libraries can be found in `KasmVNC/unix/KasmVNC`\n\nSo that is what is necessary for the vncserver script to run. But is this script really necessary? Based on the names of the perl libraries, this script might not be adding any core functionalities to kasmvnc, only things like additional command line options, or loggers.\n\nI need to find where this script runs kasmvnc, and also where the actual kasmvnc binary is.\n\nI think their fork of xvnc is located in `KasmVNC/unix/xserver/hw/vnc/xvnc.c`.\n\nBut I get compilation errors:\n\n``` {.default .code-overflow-wrap}\n\n[nix-shell:~/vscode/tigervnc/KasmVNC]$ make \n[  3%] Built target os\n[ 13%] Built target rdr\n[ 30%] Built target network\n[ 31%] Built target Xregion\n[ 78%] Built target rfb\n[ 80%] Built target tx\n[ 81%] Built target unixcommon\n[ 81%] Linking CXX executable vncconfig\n/nix/store/178vvank67pg2ckr5ic5gmdkm3ri72f3-binutils-2.39/bin/ld: cannot find -lturbojpeg: No such file or directory\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [unix/vncconfig/CMakeFiles/vncconfig.dir/build.make:157: unix/vncconfig/vncconfig] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:610: unix/vncconfig/CMakeFiles/vncconfig.dir/all] Error 2\nmake: *** [Makefile:136: all] Error 2\n```\n\nI don't know why this happens. For those who don't know, make pretty much calls a set of scripts, called Makefiles. I will need to find where in these scripts, the error commands are run.\n\nWeirdly, I can't reproduce outside of the build script:\n\n``` {.default .code-overflow-wrap}\n\n~/vscode/tigervnc/KasmVNC master ?1 ❯ ld -lsdsakdfj\nld: cannot find -lsdsakdfj: No such file or directory\n~/vscode/tigervnc/KasmVNC master ?1 ❯ ld -lturbojpeg\nld: warning: cannot find entry symbol _start; not setting start address\n~/vscode/tigervnc/KasmVNC master ?2 ❯ ld -ljpeg     \nld: warning: cannot find entry symbol _start; not setting start address\n~/vscode/tigervnc/KasmVNC master ?2 ❯ ld -ljpeg-turbo\nld: cannot find -ljpeg-turbo: No such file or directory\n~/vscode/tigervnc/KasmVNC master ?1 ❯ \n```\n\nI suspect the make scripts have some hacks that change working directory, or otherwise hide my installation of libjpeg.\n\nWhen commenting out the part of the `KasmVNC/Cmakelists.txt` file that appears to be related to libjpeg, the error when I run `make` changes.\n\n``` {.default .code-overflow-wrap}\n[ 95%] Building CXX object unix/vncconfig/CMakeFiles/vncconfig.dir/vncconfig.cxx.o\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/Surface.cxx:23:10: fatal error: FL/Fl_RGB_Image.H: No such file or directory\n   23 | #include <FL/Fl_RGB_Image.H>\n      |          ^~~~~~~~~~~~~~~~~~~\ncompilation terminated.\nmake[2]: *** [tests/CMakeFiles/fbperf.dir/build.make:104: tests/CMakeFiles/fbperf.dir/__/vncviewer/Surface.cxx.o] Error 1\nmake[2]: *** Waiting for unfinished jobs....\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/Surface_X11.cxx:26:10: fatal error: FL/Fl_RGB_Image.H: No such file or directory\n   26 | #include <FL/Fl_RGB_Image.H>\n      |          ^~~~~~~~~~~~~~~~~~~\ncompilation terminated.\nmake[2]: *** [tests/CMakeFiles/fbperf.dir/build.make:118: tests/CMakeFiles/fbperf.dir/__/vncviewer/Surface_X11.cxx.o] Error 1\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/PlatformPixelBuffer.cxx:31:10: fatal error: FL/Fl.H: No such file or directory\n   31 | #include <FL/Fl.H>\n      |          ^~~~~~~~~\n```\n\nThis is probably missing libraries.\n\nAfter installing fltk (`pacman -S fltk`), this error goes away, and I get a new, even harder to comprehend error.\n\n``` {.default .code-overflow-wrap}\n\n[ 97%] Building CXX object tests/CMakeFiles/decperf.dir/decperf.cxx.o\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/PlatformPixelBuffer.cxx: In constructor ‘PlatformPixelBuffer::PlatformPixelBuffer(int, int)’:\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/PlatformPixelBuffer.cxx:64:29: error: ‘uint8_t’ was not declared in this scope\n   64 |   setBuffer(width, height, (uint8_t*)xim->data,\n      |                             ^~~~~~~\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/PlatformPixelBuffer.cxx:38:1: note: ‘uint8_t’ is defined in header ‘<cstdint>’; did you forget to ‘#include <cstdint>’?\n   37 | #include \"PlatformPixelBuffer.h\"\n  +++ |+#include <cstdint>\n   38 | \n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/PlatformPixelBuffer.cxx:64:37: error: expected primary-expression before ‘)’ token\n   64 |   setBuffer(width, height, (uint8_t*)xim->data,\n      |                                     ^\n```\n\nI suspect I have the wrong version of the tigervnc source code/libraries. I will need to investigate where Kasm's build system downloads these vncviewer libraries from.\n\nAfter editing the errored file, to include the library:\n\nWithin `KasmVNC/vncviewer/PlatformPixelBuffer.cxx`:\n\n\\`\\`\\`{C++}\n\n#include <cstdint>\n\n```         \n\nI get a different error. \n\n\n```{.default .code-overflow-wrap}\n\n[ 94%] Building CXX object tests/CMakeFiles/fbperf.dir/__/vncviewer/PlatformPixelBuffer.cxx.o\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/PlatformPixelBuffer.cxx: In constructor ‘PlatformPixelBuffer::PlatformPixelBuffer(int, int)’:\n/home/moonpie/vscode/tigervnc/KasmVNC/vncviewer/PlatformPixelBuffer.cxx:66:3: error: ‘setBuffer’ was not declared in this scope; did you mean ‘setbuffer’?\n   66 |   setBuffer(width, height, (uint8_t*)xim->d﻿tion. I think it's likely that I have the wrong version of tigervnc or something. I will try to see how Kasm's build scripts set this up.\n\nOkay, I will attempt to create a visual graph, documenting each step of KasmVNC's build system, to build an ubuntu package. I will have hyperlinks to each of the scripts/dockerfiles, or other pieces of the github repo. Currently still working on figuring out how to use Graphviz.\n\n::: panel-tabset\n## Entry\n\n```{dot}\ndigraph {\n   // Declare Nodes here\n   node [shape=\"rectangle\"];\n   Entry [label=\"Entry.\\n Starts out at KasmVNC/builder\", URL=\"https://github.com/kasmtech/KasmVNC/tree/master/builder\"];\n   BuildPackage [label=\"I will run the 'builder/build-package ubuntu bionic' command. \\n This isn't the only command available, but for an example.\", URL=\"https://github.com/kasmtech/KasmVNC/blob/master/builder/build-package\"]\n\n   BuildTarball [label=\"build-tarball ubuntu bionic\", URL=\"https://github.com/kasmtech/KasmVNC/blob/master/builder/build-tarball\"]\n\n\n   // Declare edges (connections) here\n   Entry -> BuildPackage\n   BuildPackage -> BuildTarball\n}\n```\n\n## build-tarball\n\n\n```{dot}\ndigraph BuildTarball {\n   node [shape=\"rectangle\"];\n      www [label=\"if some condition, then \\n build and run dockerfile.www.build\", URL=\"https://github.com/kasmtech/KasmVNC/blob/master/builder/dockerfile.www.build\"]\n      incomplete [label=\"???, currrently in progress.\"]\n\n      BuildTarball [label=\"build-tarball\", URL=\"https://github.com/kasmtech/KasmVNC/blob/master/builder/build-tarball\"]\n      dockerbuild [label=\"Build and run the appropiate Dockerfile, \\n which in this case dockerfile.ubuntu_bionic.build\", URL=\"https://github.com/kasmtech/KasmVNC/blob/master/builder/dockerfile.ubuntu_bionic.build\"]\n\n\n      BuildTarball -> www\n      www -> dockerbuild\n      dockerbuild -> incomplete\n   }\n```\n\n\n## BuildWWW\n\n\n```{dot}\ndigraph BuildWWW {\n   node [shape=\"rectangle\"]\n\n      buildwwwsh [label=\"ENTRYPOINT [ \\\"/src/build_www.sh\\\" ]\", URL=\"https://github.com/kasmtech/KasmVNC/blob/master/builder/build_www.sh\"]\n\n      \"COPY kasmweb/ /src/www/\" -> \"COPY builder/build_www.sh /src/\"\n      \"COPY builder/build_www.sh /src/\" -> \"WORKDIR /src/www\"\n      \"WORKDIR /src/www\" -> \"RUN npm install\"\n      \"RUN npm install\" -> buildwwwsh\n\n   }\n```\n\n\n## dockerfile.ubuntu.build\n\n\n```{dot}\ndigraph BuildonUbuntu {\n   node [shape=\"rectangle\"]\n   Entry [label=\"Entry here.\\nThis entire phase happens in a docker container\"]\n   devpendencies [label=\"Install some dependencies.\\nNotably, tightvncserver\"]\n   Makeinstalls [label=\"build and install webp and libjpeg turbo\", URL=\"https://github.com/kasmtech/KasmVNC/tree/master/builder/scripts\"]buildsh [label=\"build.sh\\n This is the command the built docker container runs\", URL=\"https://github.com/kasmtech/KasmVNC/blob/master/builder/build.sh\"]\n\n   Entry -> devpendencies \n   devpendencies -> Makeinstalls\n   Makeinstalls -> \"Install some more libs\"\n   \"Install some more libs\" -> buildsh  \n}\n```\n\n\n::: {.callout-note collapse=\"true\"}\n## Note about dependencies install\n\nFor some reason they use multiple build phases for the same step of installing packages. In addition to that, they don't clean the apt cache between build stages.\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Note about webp and libjpeg-turbo\n\nThey make and install --- in the build dockerfile. I will end up skipping this step, as nix packages these, but why do they do that?\n:::\n:::\n\nI will expand on this, and organize it further. But based on these beginnings, kasmvnc appears to be a perl script that either starts a sepreate webserver or serves a webserver (if there is a perl native way to do this?), which appears to be based on novnc, while it also starts the vnc server, which is based on tigervnc.\n\nHowever, I am still confused about one thing: Where does it download the vnc server source code.\n\n\n\n# The easy way\n\nAfter I packaged quarto, I realized that I can actually package the kasmvnc binary using nix. I have decided to do this for now.\n\nHere is my current derivation (nix build file)\n\n```{.nix .code-fold-false}\n\n{\n    stdenv,\n    lib,\n    fetchurl,\n    makeWrapper,\n    perl536Packages\n} :\n\nstdenv.mkDerivation rec {\n  pname = \"kasmvnc\";\n  version = \"1.1.0\";\n  src = fetchurl {\n    url = \"https://github.com/kasmtech/KasmVNC/releases/download/v${version}/kasmvnc.alpine_317_x86_64.tgz\";\n    sha256 = \"sha256-j/3PUwBd8XygBKYfFdAwN15cwxDPf3vbEwbLy1laxSU=\";\n  };\n\n  nativeBuildInputs = [\n  ];\n\n  patches = [\n  ];\n\n  postPatch = ''\n  '';\n\n  dontStrip = true;\n\n  preFixup = ''\n        wrapProgram $out/bin/vncserver \\\n         --prefix PERLLIB : $out/bin  \\\n         --prefix PERLLIB : ${perl536Packages.YAMLTiny}/lib/perl5/site_perl/5.36.0 \\\n         --prefix PERLLIB : ${perl536Packages.HashMergeSimple}/lib/perl5/site_perl/5.36.0\n  '';\n\n  installPhase = ''\n      runHook preInstall\n\n      mkdir -p $out/bin $out/share $out/man $out/etc $out/lib\n\n      echo here\n      ls\n      ls local/bin\n\n      mv local/etc/* $out/etc\n      mv local/share/* $out/share\n      mv local/man/* $out/man\n      mv local/lib/* $out/lib\n      mv local/bin/* $out/bin\n\n      runHook preInstall\n  '';\n\n  meta = with lib; {\n    description = \"Kasmvnc\";\n    longDescription = ''\n        Long description here\n    '';\n    homepage = \"\";\n    changelog = \"https://github.com/kasmtech/KasmVNC/releases/tag/v${version}\";\n    license = licenses.gpl2Plus;\n    maintainers = with maintainers; [ moonpiedumplings ];\n    platforms = [ \"x86_64-linux\" ];\n    sourceProvenance = with sourceTypes; [ binaryNativeCode binaryBytecode ];\n  };\n}\n```\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"show\"}\nprint(\"funny.txt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunny.txt\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}