[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quartotest",
    "section": "",
    "text": "Night at the Meseum!\n\n\n\n\n\n\n\nnginx\n\n\nlinux\n\n\n\n\nJust a collection of my thoughts.\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 17-18\n\n\n\n\n\n\n\nlessons\n\n\n\n\nAlgorithmic Efficiency and Undecidable Problems\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nFun with dictionaries\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nFixing jekyll on windows and macos devices.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nObservable Javascript in Quarto\n\n\n\n\n\nexperiments with observable javascript\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nCalculator Starters\n\n\n\n\n\n\n\n2.C\n\n\nC7.0\n\n\n\n\nA common way to become familiar with a language is to build a calculator. This calculator shows off button with actions.\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nGrades and Vocab\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nKasmweb setup\n\n\n\n\n\n\n\nnix\n\n\nlinux\n\n\ndevops\n\n\nubuntu\n\n\nkasm\n\n\n\n\n\n\n\n\n\n\n\nJan 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnit 3 Sections 12-13\n\n\n\n\n\n\n\nlessons\n\n\n\n\nDeveloping and Writing Procedures Lesson\n\n\n\n\n\n\nDec 7, 2022\n\n\n\n\n\n\n  \n\n\n\n\n3.9 and 3.11 Lesson\n\n\n\n\n\n\n\nlesson\n\n\n\n\nInteractive lesson covering content from Collegeboard 3.9 and 3.11 made by students for students\n\n\n\n\n\n\nDec 6, 2022\n\n\n\n\n\n\n  \n\n\n\n\n8 and 10 Lesson and HW\n\n\n\n\n\n\n\nlessons\n\n\n\n\nLists and Iteration, 8-10 Lesson and HW\n\n\n\n\n\n\nDec 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 14 and 15\n\n\n\n\n\n\n\njupyter\n\n\nmarkdown\n\n\n\n\nLibraries and Random Values\n\n\n\n\n\n\nNov 30, 2022\n\n\n\n\n\n\n  \n\n\n\n\n5-7 Lesson and HW\n\n\n\n\n\n\n\nnotebook\n\n\n\n\nWelcome to the World of Booleans and Conditionals!\n\n\n\n\n\n\nNov 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBig idea 3!\n\n\n\n\n\n\n\nWeek-13\n\n\nBig-Idea-3\n\n\n\n\nLesson on Big Idea 3 which includes expressions, strings, psuedocode, and more!\n\n\n\n\n\n\nNov 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3-4 Lesson and HW\n\n\n\n\n\n\n\nWeek-13\n\n\nBig-Idea-3\n\n\n\n\nLesson on Big Idea 3 which includes expressions, strings, psuedocode, and more!\n\n\n\n\n\n\nNov 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1-2 Lesson and Homework\n\n\n\n\n\n\n\njupyter\n\n\nWeek 13\n\n\n\n\nThe homework assignment and challenge in our lesson plan\n\n\n\n\n\n\nNov 28, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBinary Logic and Abstraction\n\n\n\n\n\n\n\n1.D\n\n\n2.B\n\n\n3.C\n\n\nC4/4\n\n\n\n\nTaking a look at binary abstractions (ASCII, Unicode, Images),logic gates, etc\n\n\n\n\n\n\nNov 14, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 11, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinal Exam corrections\n\n\n\n\n\n\n\ncollegeboard\n\n\n\n\nI only got one wrong.\n\n\n\n\n\n\nNov 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBig Idea 1 ‘Identifying and Correcting Errors’\n\n\n\n\n\n\n\n1.B\n\n\n4.C\n\n\n\n\nPractice with identifying and correcting code blocks\n\n\n\n\n\n\nOct 3, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPython RapidAPI\n\n\n\n\n\n\n\n1.A\n\n\n5.B\n\n\n5.D\n\n\n\n\nAPIs can be found all over the internet. A great consolidator of many APIs is RapidAPI. In this blog we will use a site to consolidates API stats. Learning a few lines of code and you can start extracting lots of data from the internet via APIs.\n\n\n\n\n\n\nOct 3, 2022\n\n\n\n\n\n\n  \n\n\n\n\nSetting up cockpit\n\n\n\n\n\n\n\naws\n\n\nec2\n\n\ndocker\n\n\nlinux\n\n\n\n\ncockpit is a gui to manage linux servers.\n\n\n\n\n\n\nSep 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFootball Quiz\n\n\n\n\n\n\n\ncollegeboard\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2022\n\n\nmoonpie\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBash toolcheck\n\n\n\n\n\n\n\ncollegeboard\n\n\n\n\nA set of bash scripts that demonstrate that I have all my tools installed\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBinary Math\n\n\n\n\n\n\n\n3.B\n\n\n3.C\n\n\nC4.4\n\n\n\n\nA Binary Math illustrative application using HTML, Liquid, and JavaScript.\n\n\n\n\n\n\nJul 7, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFastpages Notebook Blog Post\n\n\n\n\n\n\n\njupyter\n\n\n\n\nA tutorial of fastpages for Jupyter notebooks.\n\n\n\n\n\n\nFeb 20, 2020\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2020-02-20-test.html",
    "href": "posts/2020-02-20-test.html",
    "title": "Fastpages Notebook Blog Post",
    "section": "",
    "text": "This notebook is a demonstration of some of capabilities of fastpages with notebooks.\nWith fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts!\n\n\nThe first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this:\n# \"My Title\"\n> \"Awesome summary\"\n\n- toc: true\n- branch: master\n- badges: true\n- comments: true\n- author: Hamel Husain & Jeremy Howard\n- categories: [fastpages, jupyter]\n\nSetting toc: true will automatically generate a table of contents\nSetting badges: true will automatically include GitHub and Google Colab links to your notebook.\nSetting comments: true will enable commenting on your blog post, powered by utterances.\n\nThe title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README.\n\n\n\nA #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post.\nA #hide_input comment at the top of any code cell will only hide the input of that cell.\n\n\nThe comment #hide_input was used to hide the code that produced this.\n\n\nput a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:\n\n\nCode\nimport pandas as pd\nimport altair as alt\n\n\nput a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:\n\n\nCode\ncars = 'https://vega.github.io/vega-datasets/data/cars.json'\nmovies = 'https://vega.github.io/vega-datasets/data/movies.json'\nsp500 = 'https://vega.github.io/vega-datasets/data/sp500.csv'\nstocks = 'https://vega.github.io/vega-datasets/data/stocks.csv'\nflights = 'https://vega.github.io/vega-datasets/data/flights-5k.json'\n\n\nplace a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it:\n\n#collapse-output\nprint('The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.')\n\nThe comment #collapse-output was used to collapse the output of this cell by default but you can expand it.\n\n\n\n\n\nCharts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook.\n\n\n\n# single-value selection over [Major_Genre, MPAA_Rating] pairs\n# use specific hard-wired values as the initial selected values\nselection = alt.selection_single(\n    name='Select',\n    fields=['Major_Genre', 'MPAA_Rating'],\n    init={'Major_Genre': 'Drama', 'MPAA_Rating': 'R'},\n    bind={'Major_Genre': alt.binding_select(options=genres), 'MPAA_Rating': alt.binding_radio(options=mpaa)}\n)\n  \n# scatter plot, modify opacity based on selection\nalt.Chart(df).mark_circle().add_selection(\n    selection\n).encode(\n    x='Rotten_Tomatoes_Rating:Q',\n    y='IMDB_Rating:Q',\n    tooltip='Title:N',\n    opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05))\n)\n\n\n\n\n\n\n\n\n\n\n\nalt.Chart(df).mark_circle().add_selection(\n    alt.selection_interval(bind='scales', encodings=['x'])\n).encode(\n    alt.X('Rotten_Tomatoes_Rating', type='quantitative'),\n    alt.Y('IMDB_Rating', type='quantitative', axis=alt.Axis(minExtent=30)),\n#     y=alt.Y('IMDB_Rating:Q', ), # use min extent to stabilize axis title placement\n    tooltip=['Title:N', 'Release_Date:N', 'IMDB_Rating:Q', 'Rotten_Tomatoes_Rating:Q']\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\n\n\n\n# select a point for which to provide details-on-demand\nlabel = alt.selection_single(\n    encodings=['x'], # limit selection to x-axis value\n    on='mouseover',  # select on mouseover events\n    nearest=True,    # select data point nearest the cursor\n    empty='none'     # empty selection includes no data points\n)\n\n# define our base line chart of stock prices\nbase = alt.Chart().mark_line().encode(\n    alt.X('date:T'),\n    alt.Y('price:Q', scale=alt.Scale(type='log')),\n    alt.Color('symbol:N')\n)\n\nalt.layer(\n    base, # base line chart\n    \n    # add a rule mark to serve as a guide line\n    alt.Chart().mark_rule(color='#aaa').encode(\n        x='date:T'\n    ).transform_filter(label),\n    \n    # add circle marks for selected time points, hide unselected points\n    base.mark_circle().encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n\n    # add white stroked text to provide a legible background for labels\n    base.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='price:Q'\n    ).transform_filter(label),\n\n    # add text labels for stock prices\n    base.mark_text(align='left', dx=5, dy=-5).encode(\n        text='price:Q'\n    ).transform_filter(label),\n    \n    data=stocks\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\n\n\nYou can display tables per the usual way in your blog:\n\n# display table with pandas\ndf[['Title', 'Worldwide_Gross', \n    'Production_Budget', 'Distributor', 'MPAA_Rating', 'IMDB_Rating', 'Rotten_Tomatoes_Rating']].head()\n\n\n\n\n\n  \n    \n      \n      Title\n      Worldwide_Gross\n      Production_Budget\n      Distributor\n      MPAA_Rating\n      IMDB_Rating\n      Rotten_Tomatoes_Rating\n    \n  \n  \n    \n      0\n      The Land Girls\n      146083.0\n      8000000.0\n      Gramercy\n      R\n      6.1\n      NaN\n    \n    \n      1\n      First Love, Last Rites\n      10876.0\n      300000.0\n      Strand\n      R\n      6.9\n      NaN\n    \n    \n      2\n      I Married a Strange Person\n      203134.0\n      250000.0\n      Lionsgate\n      None\n      6.8\n      NaN\n    \n    \n      3\n      Let's Talk About Sex\n      373615.0\n      300000.0\n      Fine Line\n      None\n      NaN\n      13.0\n    \n    \n      4\n      Slam\n      1087521.0\n      1000000.0\n      Trimark\n      R\n      3.4\n      62.0\n    \n  \n\n\n\n\n\n\n\n\n\nYou can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax:\n![](my_icons/fastai_logo.png)\n\n\n\n\nRemote images can be included with the following markdown syntax:\n![](https://image.flaticon.com/icons/svg/36/36686.svg)\n\n\n\n\nAnimated Gifs work, too!\n![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif)\n\n\n\n\nYou can include captions with markdown images like this:\n![](https://www.fast.ai/images/fastai_paper/show_batch.png \"Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/\")"
  },
  {
    "objectID": "posts/2020-02-20-test.html#github-flavored-emojis",
    "href": "posts/2020-02-20-test.html#github-flavored-emojis",
    "title": "Fastpages Notebook Blog Post",
    "section": "GitHub Flavored Emojis",
    "text": "GitHub Flavored Emojis\nTyping I give this post two :+1:! will render this:\nI give this post two :+1:!"
  },
  {
    "objectID": "posts/2020-02-20-test.html#tweetcards",
    "href": "posts/2020-02-20-test.html#tweetcards",
    "title": "Fastpages Notebook Blog Post",
    "section": "Tweetcards",
    "text": "Tweetcards\nTyping > twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this:\n\ntwitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20"
  },
  {
    "objectID": "posts/2020-02-20-test.html#youtube-videos",
    "href": "posts/2020-02-20-test.html#youtube-videos",
    "title": "Fastpages Notebook Blog Post",
    "section": "Youtube Videos",
    "text": "Youtube Videos\nTyping > youtube: https://youtu.be/XfoYk_Z5AkI will render this:"
  },
  {
    "objectID": "posts/2020-02-20-test.html#boxes-callouts",
    "href": "posts/2020-02-20-test.html#boxes-callouts",
    "title": "Fastpages Notebook Blog Post",
    "section": "Boxes / Callouts",
    "text": "Boxes / Callouts\nTyping > Warning: There will be no second warning! will render this:\n\n\n\n\n\n\nWarning\n\n\n\nThere will be no second warning!\n\n\nTyping > Important: Pay attention! It's important. will render this:\n\n\n\n\n\n\nImportant\n\n\n\nPay attention! It’s important.\n\n\nTyping > Tip: This is my tip. will render this:\n\n\n\n\n\n\nTip\n\n\n\nThis is my tip.\n\n\nTyping > Note: Take note of this. will render this:\n\n\n\n\n\n\nNote\n\n\n\nTake note of this.\n\n\nTyping > Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs:\n\n\n\n\n\n\nNote\n\n\n\nA doc link to an example website: fast.ai should also work fine."
  },
  {
    "objectID": "posts/2020-02-20-test.html#footnotes",
    "href": "posts/2020-02-20-test.html#footnotes",
    "title": "Fastpages Notebook Blog Post",
    "section": "Footnotes",
    "text": "Footnotes\nYou can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this:\n{% raw %}For example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ 'This is the footnote.' | fndetail: 1 }}\n{{ 'This is the other footnote. You can even have a [link](www.github.com)!' | fndetail: 2 }}{% endraw %}\nFor example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ ‘This is the footnote.’ | fndetail: 1 }} {{ ‘This is the other footnote. You can even have a link!’ | fndetail: 2 }}"
  },
  {
    "objectID": "posts/2022-07-07-PBL-binary.html",
    "href": "posts/2022-07-07-PBL-binary.html",
    "title": "Binary Math",
    "section": "",
    "text": "{% include nav_frontend.html %}\n{% assign BITS = 8 %}\n\n\n    \n        Binary Math with Conversions\n    \n    \n        \n            \n            \n                Plus\n                Binary\n                Octal\n                Hexadecimal\n                Decimal\n                Minus\n            \n            \n                +1\n                00000000\n                0\n                0\n                0\n                -1\n            \n            \n        \n        \n            {% comment %}Liquid for loop includes last number, thus the Minus{% endcomment %}\n            {% assign bits = BITS | minus: 1 %} \n            \n                {% comment %}Build many bits{% endcomment %}\n                {% for i in (0..bits) %}\n                \n                {% endfor %}\n            \n                {% comment %}Value of bit{% endcomment %}\n                {% for i in (0..bits) %}\n                \n                {% endfor %}\n            \n            \n                    Turn on"
  },
  {
    "objectID": "posts/2022-08-22-toolcheck.html",
    "href": "posts/2022-08-22-toolcheck.html",
    "title": "Bash toolcheck",
    "section": "",
    "text": "Check for vscode being installed properly\n\ncode --version\n\n1.70.24l\ne4503b30fc78200f846c62cf8091b76ff5547662\nx64\n\n\n: 1\n\n\nCheck for conda\n\nconda --version\n\nconda 4.13.0\n\n\n: 1\n\n\n\nconda --list \n\nusage: conda [-h] [-V] command ...\nconda: error: the following arguments are required: command\n\nNote: you may need to restart the kernel to use updated packages.\n\n\n\njupyter kernelspec list\n\nAvailable kernels:\n  bash          /home/moonpie/.local/share/jupyter/kernels/bash\n  javascript    /home/moonpie/.local/share/jupyter/kernels/javascript\n  python3       /home/moonpie/.local/share/jupyter/kernels/python3\n\n\n: 1\n\n\n\npython --version # python 3 version\n\nPython 3.10.6\n\n\n: 1\n\n\n\npython2 --version # python 2 version\n\nPython 2.7.18\n\n\n: 1"
  },
  {
    "objectID": "posts/2022-08-26-pythonquiz.html",
    "href": "posts/2022-08-26-pythonquiz.html",
    "title": "Football Quiz",
    "section": "",
    "text": "Code\n\nquestions = [\"Is Jeffrey the smartest person alive\"]\nanswers = [\"yes\"]\ngrade = 0\na = 0\nfor q in questions:\n    answer = input(q)\n    if answer == answers[a]:\n        print(\"you are very smart\")\n        grade += 1\n    else:\n        print(\"you are dumb\")\n    a += 1\nprint(grade,\"/\", len(questions))\n\nyou are very smart\n1 / 1\n\n\n\n\nExplanation\nMy code is much simpler than the example given. By using what is called a for loop, I can repeat the same actions or lines of code (with different inputs) allowing me to have to not type as much. The other thing I am taking advantage of is a list. In python, a list is basically a way to store multiple values.\nThe syntax of a for loop is for i in j\ni is a variable, one which starts at 0 and gets added to until it reaches j. The program runs what is in the for function once, then adds to i, and then repeats until i reaches j. For loops exist in lots of programming languages.\nHowever, I did something special. I created a list called questions, which can store as many questions as I want. I also created a list called answers, which stores anwsers. The for q in questions doesn’t just behave like a normal for loop, the q is not a variable, but rather an item in the list. The function goes through the list with different items.\nIn addition to that, I set a variable called a. a is used to call on a specific item in the list answers, one that matches the question. By adding 1 to a at the end of the for loop, I can make sure the item called from questions matches with that of answers.\nBecause of my genius intelligence, I was able to create quiz, that is infinitely extendable. You simply add more items to the list of questions and answers, and more questions and answers will be added. No programming necessary. In addition to that, it also gives a fraction score.\n\nquestions = [[\"Is Jeffrey the Smartest person alive\", \"yes\"], [\"How many players are there on a football team?\", \"11\"]]\ngrade = 0\nfor q in questions:\n    a = input(q[0])\n    if a == q[1]:\n        print(\"Correct\")\n        grade +=1\n    else:\n        print(\"Incorrect\")\n\nprint(\"%\",(grade / len(questions) * 100))\n\nCorrect\nCorrect\n% 100.0"
  },
  {
    "objectID": "posts/2022-09-28-javascript tutorial.html",
    "href": "posts/2022-09-28-javascript tutorial.html",
    "title": "Quartotest",
    "section": "",
    "text": "toc: true\ntitle: Messing Around with Javascript\ncomments: true\n\nJavascipt is another programming language. Just like python, it has variables, functions, iterations, just sometimes in different forms.\n\n// Javascript works with arrays rather than lists. They are basically the same thing, besides the name. \nvar students = [ \n    new Person(\"Anthony\", \"tonyhieu\", 2022),\n    new Person(\"Bria\", \"B-G101\", 2023),\n    new Person(\"Allie\", \"xiaoa0\", 2023),\n    new Person(\"Tigran\", \"Tigran7\", 2023),\n    new Person(\"Rebecca\", \"Rebecca-123\", 2023),\n    new Person(\"Vidhi\", \"unknown\", 2024)\n\n\n// json is a file format used to transport data from one program to another, even if those programs are in different languages. \n\n// define a classroom and build Classroom objects and json\nfunction Classroom(teacher, students){ // 1 teacher, many student\n    // start Classroom with Teacher\n    teacher.setRole(\"Teacher\");\n    this.teacher = teacher;\n    this.classroom = [teacher];\n    // add each Student to Classroom\n    this.students = students;\n    this.students.forEach(student => { student.setRole(\"Student\"); this.classroom.push(student); });\n    // build json/string format of Classroom\n    this.json = [];\n    this.classroom.forEach(person => this.json.push(person.toJSON()));\n}\n\n// make a CompSci classroom from formerly defined teacher and students\ncompsci = new Classroom(teacher, students);\n\n// output of Objects and JSON in CompSci classroom\nlogItType(compsci.classroom);  // constructed classroom object\nlogItType(compsci.classroom[0].name);  // abstract 1st objects name\nlogItType(compsci.json[0]);  // show json conversion of 1st object to string\nlogItType(JSON.parse(compsci.json[0]));  // show JSON.parse inverse of JSON.stringify"
  },
  {
    "objectID": "posts/2022-10-03-ap-error_testing.html",
    "href": "posts/2022-10-03-ap-error_testing.html",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "",
    "text": "College Board Big Idea 1"
  },
  {
    "objectID": "posts/2022-10-03-ap-error_testing.html#identifying-and-correcting-errors-unit-1.4",
    "href": "posts/2022-10-03-ap-error_testing.html#identifying-and-correcting-errors-unit-1.4",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "Identifying and Correcting Errors (Unit 1.4)",
    "text": "Identifying and Correcting Errors (Unit 1.4)\n\nBecome familiar with types of errors and strategies to fixing them - Lightly Review Videos and take notes on topics with Blog - Complete assigned MCQ questions"
  },
  {
    "objectID": "posts/2022-10-03-ap-error_testing.html#hacks",
    "href": "posts/2022-10-03-ap-error_testing.html#hacks",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "Hacks",
    "text": "Hacks\n\nNow is a good time to think about Testing of your teams final project… - What errors may arise in your project? - What are some test cases that can be used? - Make sure to document any bugs you encounter and how you solved the problem. - What are “single” tests that you will perform on your project? Or, your part of the project? * As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests."
  },
  {
    "objectID": "posts/2022-10-03-pbl-python_rapidapi.html",
    "href": "posts/2022-10-03-pbl-python_rapidapi.html",
    "title": "Python RapidAPI",
    "section": "",
    "text": "APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information…"
  },
  {
    "objectID": "posts/2022-10-03-pbl-python_rapidapi.html#hacks",
    "href": "posts/2022-10-03-pbl-python_rapidapi.html#hacks",
    "title": "Python RapidAPI",
    "section": "Hacks",
    "text": "Hacks\n\nFind and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way.\n- RapidAPI - GitHub Project - No Key APIs Article - Twitter Developer - Google Developer - Reddit Developer\n\n\nShow API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk."
  },
  {
    "objectID": "posts/2022-10-09-stocks api fun.html",
    "href": "posts/2022-10-09-stocks api fun.html",
    "title": "Quartotest",
    "section": "",
    "text": "toc: true\ntitle: messing around with stocks\ntags: [api]\ncategories [python]\n\nBecuase of our unorthodox choice of api, before running, you must install the required library:\npip install polygon-api-client\n\n# libraries\n\nfrom polygon import RESTClient\nfrom typing import cast\nfrom urllib3 import HTTPResponse\n\n# API key for the stocks\n\nclient = RESTClient(\"4smt0M_ePY6rylHRcP5t3v3pa7WS_pB9\") # api key in quotes \n\n\n\nstr = input(\"What stock would you like?\")\ndate = input(\"Date? (Please formate it in as YYYY-MM-DD\")\nprint(date)\ndata = client.get_daily_open_close_agg(str, date)\n\n\nprint(data)\n\nprint(data.symbol)\n\nprint(data.open)\n\n2022-10-10\nDailyOpenCloseAgg(after_hours=140.92, close=140.42, from_='2022-10-10', high=141.89, low=138.5729, open=140.42, pre_market=139.95, status='OK', symbol='AAPL', volume=74899002.0, otc=None)\nAAPL\n140.42\n\n\n\nfrom polygon import RESTClient\n\naggs = client.get_aggs(\"AAPL\", 1, \"day\", \"2022-10-12\", \"2022-04-04\")\nprint(aggs)\n\n[Agg(open=174.57, high=178.49, low=174.44, close=178.44, volume=76545983.0, vwap=177.4855, timestamp=1649044800000, transactions=630374, otc=None)]"
  },
  {
    "objectID": "posts/2022-11-10-finalcorrections.html",
    "href": "posts/2022-11-10-finalcorrections.html",
    "title": "Final Exam corrections",
    "section": "",
    "text": "Corrections:\nOn problem 41, I simply read too fast, and missed this.\nPseudocode:\np = 10\nq = 20\nr = 30\ns = 40\np = q # sets the value of P to the value of q. I missed this part\nq = r\ns = q\nr = p # p is not 10, it got set to 20. \n\nBecause I missed the earlier, when asked for the value of r, I answered 10, when the correct answer is 20.\n\n\nThings I had to google:\nI actually did have to google something, only one thing. On one of the internet questions, I had to google whether or not packets could be in order, which is not the case. Packets can be an any order, even TCP packets (I had incorrectly thought TCP packets had to be in order)."
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html",
    "href": "posts/2022-11-14-AP-binary_logic.html",
    "title": "Binary Logic and Abstraction",
    "section": "",
    "text": "Algorithms, Data and Data Structures go together. It is required to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be your data topic!!! Use a data topic as you learn algorithms and programming. - Explore that topic in Computer Science manner (research, jupyter notebooks, frontend / backend coding) - Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. - Teach with examples… Segment from CS50 and go to minute 13:15. - Tour the Code. Use Binary Frontend Code to get you started. Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug - This Tech Talk will finish by reviewing hacks, the remainder of this blog and Binary Frontend Code is part of your research."
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#math-in-binary",
    "href": "posts/2022-11-14-AP-binary_logic.html#math-in-binary",
    "title": "Binary Logic and Abstraction",
    "section": "Math in Binary",
    "text": "Math in Binary\n\nLearn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on w3schools\n\n\nLogic of Shift\n\nExplore right and left shifts with binary numbers.\n- In an arithmetic shift, the bits that are shifted out of either end are discarded. - In a left arithmetic shift, zeros are shifted in on the right.\n\n\n\nUnderstand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2)\n\nHow does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. - This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. - Most Significant Bit (MSB), least (LSB) - This example shows negative and positive numbers, using technique called Twos Complement. - In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. - In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study.\n\n\n\nUI Concept/Design\n\nConceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. - n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n) - Add buttons for “<<” and ” >>”"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#ascii-and-unicode",
    "href": "posts/2022-11-14-AP-binary_logic.html#ascii-and-unicode",
    "title": "Binary Logic and Abstraction",
    "section": "ASCII and Unicode",
    "text": "ASCII and Unicode\n\nComputers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂\n\n\nCharacter Data Abstraction\n\nHow are characters stored? How many bits do they take?\n- ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. - Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. - ASCII - 7 bits, extended to 8 bits with Unicode - UTF-8 - UTF-16 - UTF-32 Sample of Unicode characters.\n\n\n\nUI Concept/Design\n\nThe ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type: Original ASCII"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#color-codes",
    "href": "posts/2022-11-14-AP-binary_logic.html#color-codes",
    "title": "Binary Logic and Abstraction",
    "section": "Color Codes",
    "text": "Color Codes\n\nPixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. - Monitors - 1280 x 1024 Super-eXtended Graphics Array (SXGA) - 1366 x 768 High Definition (HD) - 1600 x 900 High Definition Plus (HD+) - 1920 x 1080 Full High Definition (FHD) - 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) - TVs - 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … - 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … - 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. - Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704|\n|5.0|2592 x 1944|\n|7.1|3072 x 2304|\n|8.0|3264 x 2448| |10.0|3648 x 2736|\n|12.1|4000 x 3000|\n|14.7|4416 x 3312|\n|21.0|5616 x 3744|\n\n\nA Color code is a 24 bit abstraction.\n\nThere are 8 bits for Red, 8 bits for Blue, and 8 bits for Green.\n\n|Name|Hex Code|RGB Code| |Black|#000000|rgb(0, 0, 0)| |Red|#FF0000|rgb(255, 0, 0)| |Maroon|#800000|rgb(128, 0, 0)| |Yellow|#FFFF00|rgb(255, 255, 0)|\n255  255 * 255 combinations of R, G, B*\n\n\nUI Design\n\nHere is a sample program a student used to visualize color by turning buttons on and off. by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#logic-gates",
    "href": "posts/2022-11-14-AP-binary_logic.html#logic-gates",
    "title": "Binary Logic and Abstraction",
    "section": "Logic Gates",
    "text": "Logic Gates\n\nThe fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables.\n\n\nLogic Gates can be simulated with 2 bits\nLook for bitwise operators on w3schools\n\n\nUI Concept\n\nVisual concept of logic gates - Establish check boxes for A / B on and off - Show result of Boolean Expression using Gate visual Logic Gates\n\n\n\nUI Design\n\nLogic gate lab in JavaScript by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result\n\n\n\nLogic of Logic Gates\n\nA logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). - There are four possible inputs: - 0 0 - 0 1 - 1 0 - 1 1 - Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). - AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 - OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 - XOR is true for 0 1, 1 0\n\n\n\nPractical Application\n\nLogic gates are used everywhere"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#unsigned-addition",
    "href": "posts/2022-11-14-AP-binary_logic.html#unsigned-addition",
    "title": "Binary Logic and Abstraction",
    "section": "Unsigned Addition",
    "text": "Unsigned Addition\nHere we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits.\n\nInitial UI Implementation\nAction buttons for +1 and -1 Additional actions for Turn On and Turn Off\n\n\nUnsigned Addition"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#signed-addition",
    "href": "posts/2022-11-14-AP-binary_logic.html#signed-addition",
    "title": "Binary Logic and Abstraction",
    "section": "Signed Addition",
    "text": "Signed Addition\nIntegers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign.\n\nCommon concept for Integer Math\nPositive number\n\n\nBasic concept, but not typically used\nNegative number\n\n\nInverting numbers, twos complement\nTwo’s complement allows adding for signed and unsigned numbers\nBasic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. >> and >>> have been adapted to handle signed and zero filled shifting."
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#technical-helpers",
    "href": "posts/2022-11-14-AP-binary_logic.html#technical-helpers",
    "title": "Binary Logic and Abstraction",
    "section": "Technical helpers",
    "text": "Technical helpers\n\nHarvard CS50 minute 0 to minute 50 to provide background on some of the information below.\n\n\nAlgorithm in Jinja2 to limit Bits per row\n8 images per row by Kylie Scharf Modulo 8 algorithm add\n\nfor every eight bits (code).\n\n\nResearch Helpers\nCHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson"
  },
  {
    "objectID": "posts/2022-11-14-AP-binary_logic.html#hacks",
    "href": "posts/2022-11-14-AP-binary_logic.html#hacks",
    "title": "Binary Logic and Abstraction",
    "section": "Hacks",
    "text": "Hacks\n\nData, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. - Use data abstraction (ie data structures) in your lesson - Make sure you teach/learn elements from this blog as you learn algorithms - Add “Science” into your process (research, jupyter notebook, and ultimately running application) - Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher. The topics above focus on data ideas from Unit 2 of AP Classroom."
  },
  {
    "objectID": "posts/2022-11-2-Night at the meseum.html",
    "href": "posts/2022-11-2-Night at the meseum.html",
    "title": "Night at the Meseum!",
    "section": "",
    "text": "A couple people wanted websockets to work, so here is the nginx I used to get websockets working for personal project which I hosted on school servers.\n server {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_name your.domain.com; # replace with your actual domain\n\n        location / { \n                # Upgrade WebSockets\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection 'Upgrade';\n                # Increase header buffer\n                proxy_connect_timeout 10; \n                proxy_send_timeout 90; \n                proxy_read_timeout 90; \n                proxy_buffer_size 128k;\n                proxy_buffers 4 256k;\n                proxy_busy_buffers_size 256k;\n                proxy_temp_file_write_size 256k;\n                proxy_pass http://127.0.0.1:8080; # change port\n            }\n        }\nThis is what I used. It’s similar to the config provided by Mr. Mortenssen, except with stuff added to make websockets work. It works with certbot as well, so I had websockets and ssl on my website.\nOther than that, I saw a lot of cool projects."
  },
  {
    "objectID": "posts/2022-11-28-1-2 lesson homework copy.html",
    "href": "posts/2022-11-28-1-2 lesson homework copy.html",
    "title": "1-2 Lesson and Homework",
    "section": "",
    "text": "The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values.\n\ndata = [104, 101, 4, 105, 308, 103, 5, 107,\n        100, 306, 106, 102, 108]    # list of the different numerical values\nmin_valid = 100  # minimum value\nmax_valid = 200  # maximum value\n\n\nprint(\"The format out put is number:place in list. It should be noted that lists in python start at 0. \\n\")\n\na = 0\nfor number in data:\n    if number < min_valid or number > max_valid:\n        print(number,\":\",a)\n    a +=1\n\nThe format out put is number:place in list. It should be noted that lists in python start at 0. \n\n4 : 2\n308 : 4\n5 : 6\n306 : 9"
  },
  {
    "objectID": "posts/2022-11-28-1-2 lesson homework copy.html#homeworkhacks",
    "href": "posts/2022-11-28-1-2 lesson homework copy.html#homeworkhacks",
    "title": "1-2 Lesson and Homework",
    "section": "Homework/Hacks",
    "text": "Homework/Hacks\nThe list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing _______ based on which song was chosen using the numbers inputted by the user that corresponds to each song.\n\nalbums = [\n    (\"Welcome to my Nightmare\", \"Alice Cooper\", 1975,   # First album list\n     [\n         (1, \"Welcome to my Nightmare\"),\n         (2, \"Devil's Food\"),\n         (3, \"The Black Widow\"),\n         (4, \"Some Folks\"),\n         (5, \"Only Women Bleed\"),\n     ]\n     ),\n    (\"Bad Company\", \"Bad Company\", 1974,   # Second album list\n     [\n         (1, \"Can't Get Enough\"),\n         (2, \"Rock Steady\"),\n         (3, \"Ready for Love\"),\n         (4, \"Don't Let Me Down\"),\n         (5, \"Bad Company\"),\n         (6, \"The Way I Choose\"),\n         (7, \"Movin' On\"),\n         (8, \"Seagull\"),\n     ]\n     ),\n    (\"Nightflight\", \"Budgie\", 1981,\n     [\n         (1, \"I Turned to Stone\"),\n         (2, \"Keeping a Rendezvous\"),\n         (3, \"Reaper of the Glory\"),\n         (4, \"She Used Me Up\"),\n     ]\n     ),\n    (\"More Mayhem\", \"Imelda May\", 2011,\n     [\n         (1, \"Pulling the Rug\"),\n         (2, \"Psycho\"),\n         (3, \"Mayhem\"),\n         (4, \"Kentish Town Waltz\"),\n     ]\n     ),\n]\n\n\na = 0\nfor al in albums:\n    print(a+1,\":\", albums[a][0])\n    a += 1\nsel = int(input(\"make your selection\")) - 1\nprint(albums[sel][3])\nsel2 = int(input(\"select a song:\")) - 1\nprint(\"Now playing\",albums[sel][3][sel2][1])\n\n1 : Welcome to my Nightmare\n2 : Bad Company\n3 : Nightflight\n4 : More Mayhem\n[(1, \"Can't Get Enough\"), (2, 'Rock Steady'), (3, 'Ready for Love'), (4, \"Don't Let Me Down\"), (5, 'Bad Company'), (6, 'The Way I Choose'), (7, \"Movin' On\"), (8, 'Seagull')]\nNow playing Rock Steady\n\n\n\n1\n1\nPlaying \"Welcome to my Nightmare\"\n\n2\n2\nPlaying \"Rock Steady\""
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw copy.html",
    "href": "posts/2022-11-29-3-4 lessson hw copy.html",
    "title": "Big idea 3!",
    "section": "",
    "text": "the symbol for exponent is **\nthe symbol for addition is ____\nthe symbol for subtraction is ____\nthe symbol for multiplication is ____\nthe symbol for division is ____\nthe symbol for modulus is ____\nan algorithm is ___\nSequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. 1. divide value1 by 10(value1 = 5)\n2. multiply 2 from the result of the step 1\n3. subtract 4 from the result of the step 2 4. print the result of step 3\n\nvalue1 = 5\nvalue2 = value1 ? 1 #step 1\nvalue3 = value2 ? 2 #step 2\nvalue4 = value3 ? 6 #step 3\nprint(value4)\n\nSelection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3.\nHint: use the MOD operator (a % b) to find the remainder when a is divided by b.\n\nnumlist = [\"3\",\"4\",\"9\",\"76\",\"891\"]\nfor i in numlist:\n    if int(i) % 3 == 0:\n        print(int(i),\" is divisible by 3\")\n        continue\n    else:\n        print(i,\"is not divisible by 3\")\n        continue\n            \n\n3  is divisible by 3\n4 is not divisible by 3\n9  is divisible by 3\n76 is not divisible by 3\n891  is divisible by 3\n\n\nHomework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html.\n\nbinary = 0000\n\n\nbin x = 0b000   \na = 0 \nnumber = int(input(\"Enter a number 1 - 255\"))\nfor l in binary:\n    if (2**a-2**(a-1)) < number:\n        print(\"something\")\n    else:\n        print(2**a)\n    a += 1\n\nsomething\nsomething\nsomething\nsomething\n\n\n\nnumber = int(input(\"Enter a number 1 - 255\"))\nprint(bin(number))\n\n0b10"
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw copy.html#stringsshow-video-1",
    "href": "posts/2022-11-29-3-4 lessson hw copy.html#stringsshow-video-1",
    "title": "Big idea 3!",
    "section": "3.4 Strings(Show video 1)",
    "text": "3.4 Strings(Show video 1)\n\nVocab: fill in the blanks using the video\nIndex is a number representing a position, like a character’s position in a string or a string’s position in a list.\nConcatenation is combining two strings\nLength is len()\nA substring is part of a string, string[num:num]\n\n\nWhat is psuedocode?\nPseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts.\nCan you think of some benefits of using pseudocode prior to writing out the actual code?\n\nChoose an everyday activity\nImagine that you are providing instructions for this activity to a person who has never done it before\nChallenge someone to do the steps you wrote out\n\nEx. Brushing Teeth\n\nPick up your toothbrush\nRinse toothbrush\nPick up toothpaste\nPlace toothpaste on the toothbrush\nRinse toothbrush again\nBrush teeth in a circular motion\nSpit\nWash mouth\nRinse toothbrush\nYou have brushed your teeth!\n\n\n\nSubstring/Length Practice: change the print functions to print “hello”, “bye”, and the string length\n\n#substring = string[start:end] \n#the substring will have the characters including the index \"start\" to the character BEFORE the index \"end\"\n#len(string) will print the length of string\n\nstring = \"hellobye\"\nprint(string[0:5])\nprint(string[5:9])\n\nhello\nbye\n\n\nConcatenation Practice: combine string1 and string2 to make string3, then print string3.\n\n#string1 + string2 will add string2 to the end of string1\n\nstring1 = \"computer\"\nstring2 = \"science\"\nstring3 = string1 + string2\nprint(string3)\n\ncomputerscience\n\n\nHomework/List Adaptation: create a function that prints the name of each string in the list and the string’s length. Challenge: add frontend with javascript or html.\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\n3\n\n\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\ndef length(list):\n    for n in names:\n        print(n)\n        print(\"Length =\",len(n))\n\nlength(names)\n\njaden\nLength = 5\nmax\nLength = 3\ndylan\nLength = 5\norlando\nLength = 7"
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw.html",
    "href": "posts/2022-11-29-3-4 lessson hw.html",
    "title": "3-4 Lesson and HW",
    "section": "",
    "text": "the symbol for exponent is **\nthe symbol for addition is ____\nthe symbol for subtraction is ____\nthe symbol for multiplication is ____\nthe symbol for division is ____\nthe symbol for modulus is ____\nan algorithm is ___\nSequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. 1. divide value1 by 10(value1 = 5)\n2. multiply 2 from the result of the step 1\n3. subtract 4 from the result of the step 2 4. print the result of step 3\n\nvalue1 = 5\nvalue2 = value1 / 10 1 #step 1\nvalue3 = value2 * 2 #step 2\nvalue4 = value3 - 4 6 #step 3\nprint(value4)\n\nSelection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3.\nHint: use the MOD operator (a % b) to find the remainder when a is divided by b.\n\nnumlist = [\"3\",\"4\",\"9\",\"76\",\"891\"]\nfor i in numlist:\n    if int(i) % 3 == 0:\n        print(int(i),\" is divisible by 3\")\n        continue\n    else:\n        print(i,\"is not divisible by 3\")\n        continue\n            \n\n3  is divisible by 3\n4 is not divisible by 3\n9  is divisible by 3\n76 is not divisible by 3\n891  is divisible by 3\n\n\nHomework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html.\n\nbinary = 0000\n\n\nbin x = 0b000   \na = 0 \nnumber = int(input(\"Enter a number 1 - 255\"))\nfor l in binary:\n    if (2**a-2**(a-1)) < number:\n        print(\"something\")\n    else:\n        print(2**a)\n    a += 1\n\nsomething\nsomething\nsomething\nsomething\n\n\n\nnumber = int(input(\"Enter a number 1 - 255\"))\nprint(bin(number))\n\n0b10"
  },
  {
    "objectID": "posts/2022-11-29-3-4 lessson hw.html#stringsshow-video-1",
    "href": "posts/2022-11-29-3-4 lessson hw.html#stringsshow-video-1",
    "title": "3-4 Lesson and HW",
    "section": "3.4 Strings(Show video 1)",
    "text": "3.4 Strings(Show video 1)\n\nVocab: fill in the blanks using the video\nIndex is a number representing a position, like a character’s position in a string or a string’s position in a list.\nConcatenation is combining two strings\nLength is len()\nA substring is part of a string, string[num:num]\n\n\nWhat is psuedocode?\nPseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts.\nCan you think of some benefits of using pseudocode prior to writing out the actual code?\n\nChoose an everyday activity\nImagine that you are providing instructions for this activity to a person who has never done it before\nChallenge someone to do the steps you wrote out\n\nEx. Brushing Teeth\n\nPick up your toothbrush\nRinse toothbrush\nPick up toothpaste\nPlace toothpaste on the toothbrush\nRinse toothbrush again\nBrush teeth in a circular motion\nSpit\nWash mouth\nRinse toothbrush\nYou have brushed your teeth!\n\n\n\nSubstring/Length Practice: change the print functions to print “hello”, “bye”, and the string length\n\n#substring = string[start:end] \n#the substring will have the characters including the index \"start\" to the character BEFORE the index \"end\"\n#len(string) will print the length of string\n\nstring = \"hellobye\"\nprint(string[0:5])\nprint(string[5:9])\n\nhello\nbye\n\n\nConcatenation Practice: combine string1 and string2 to make string3, then print string3.\n\n#string1 + string2 will add string2 to the end of string1\n\nstring1 = \"computer\"\nstring2 = \"science\"\nstring3 = string1 + string2\nprint(string3)\n\ncomputerscience\n\n\nHomework/List Adaptation: create a function that prints the name of each string in the list and the string’s length. Challenge: add frontend with javascript or html.\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\n3\n\n\n\nnames = [\"jaden\",\"max\",\"dylan\",\"orlando\"]\n\ndef length(list):\n    for n in names:\n        print(n)\n        print(\"Length =\",len(n))\n\nlength(names)\n\njaden\nLength = 5\nmax\nLength = 3\ndylan\nLength = 5\norlando\nLength = 7"
  },
  {
    "objectID": "posts/2022-11-30-randomvalues.html#hacks",
    "href": "posts/2022-11-30-randomvalues.html#hacks",
    "title": "Unit 3 Sections 14 and 15",
    "section": "Hacks:",
    "text": "Hacks:\nResearch two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code.\n\nAPI’s\n\nAn Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used.\nAn API acts as a gateway for the imported procedures from a library to interact with the rest of your code.\n\n\n\nActivity: Walkthrough with NumPy\n\nInstall NumPy on VSCode:\n\nOpen New Terminal In VSCode:\npip3 install –upgrade pip\npip install numpy\n\n\nREMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12)\n\n\nExample of using NumPy for arrays:\n\nimport numpy as np\nnew_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]])\n \nprint (new_matrix)\n\n\nExample of using NumPy for derivatives:\n\nimport numpy as np\n \n# defining polynomial function\nvar = np.poly1d([2, 0, 1])\nprint(\"Polynomial function, f(x):\\n\", var)\n \n# calculating the derivative\nderivative = var.deriv()\nprint(\"Derivative, f(x)'=\", derivative)\n \n# calculates the derivative of after\n# given value of x\nprint(\"When x=5  f(x)'=\", derivative(5))"
  },
  {
    "objectID": "posts/2022-11-30-randomvalues.html#random-values",
    "href": "posts/2022-11-30-randomvalues.html#random-values",
    "title": "Unit 3 Sections 14 and 15",
    "section": "Random Values",
    "text": "Random Values\n\nRandom number generation (RNG) produces a random number (crazy right?)\n\nThis means that a procedure with RNG can return different values even if the parameters (inputs) do not change\n\nCollegeBoard uses RANDOM(A, B), to return an integer between integers A and B.\n\nRANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10\nIn Python, this would be random.randint(A, B), after importing Python’s “random” library (import random)\nJavaScript’s works a little differently, with Math.random() returning a value between 0 and 1.\n\nTo match Python and CollegeBoard, you could make a procedure like this\n\n\n\n\nCollegeBoard Example: What is the possible range of values for answ3\n\n\n\nCollegeBoard\n\n\n\n\nConvert the following procedure to Python, then determine the range of outputs if n = 5.\n\nPROCEDURE Dice(n)\n    sum ← 0\n    REPEAT UNTIL n = 0\n        sum ← sum + RANDOM(1, 6)\n        n ← n - 1\n    RETURN sum\n\n\n\nimport random # Fill in the blank\n\ndef Dice(n):\n    print(random.randint(1, n))\n    \n    \nDice(5) # Will output a range of 1 to 5\n\n2"
  },
  {
    "objectID": "posts/2022-11-30-randomvalues.html#homework",
    "href": "posts/2022-11-30-randomvalues.html#homework",
    "title": "Unit 3 Sections 14 and 15",
    "section": "Homework",
    "text": "Homework\n\nWrite a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier).\nUsing NumPy and only coding in python cell, find the answer to the following questions:\n\nWhat is the derivative of 2x^5 - 6x^2 + 24x?\nWhat is the derivative of (13x^4 + 4x^2) / 2 when x = 9?\n\nSuppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order.\n\n\nimport random\nlist = []\nn = int(input(\"n?\"))\n\nfor i in range(n):\n    list.append(random.randint(0, 1000))\nlisteven = []\nlistodd = []\n\nfor i in list:\n    if i % 2 == 0:\n        listeven.append(i)\n    else:\n        listodd.append(i)\n\nprint(list)\nprint(listeven)\nprint(listodd)\n\n[209, 526, 597, 939, 653]\n[526]\n[209, 597, 939, 653]\n\n\n\nfrom sympy import * # sympy is basically the same thing as numpy\ninit_printing(use_unicode=False, wrap_line=False)\nx = Symbol('x')\n\nq = input(\"expression?\")\nn = input(\"find derivative at a point? Leave blank if you want general derivative\")\nif n == \"\":\n    answer = diff(sympify(q))\nelse:\n    answer = diff(sympify(q), x, int(n))\n\nprint(\"Your derivative is \",answer)\nprint(n)\n\nYour derivative is  0\n4\n\n\n\nimport random\n\ncats = [\"cat\" + str(i) for i in range(10)]\nprint(cats)\n\ndogs = [\"dog\" + str(i) for i in range(10)]\nprint(dogs)\n\ncatdogs = cats + dogs\n\nprint(catdogs)\n\nrandom.shuffle(catdogs)\n\nprint(catdogs)\n\n['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9']\n['dog0', 'dog1', 'dog2', 'dog3', 'dog4', 'dog5', 'dog6', 'dog7', 'dog8', 'dog9']\n['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'dog0', 'dog1', 'dog2', 'dog3', 'dog4', 'dog5', 'dog6', 'dog7', 'dog8', 'dog9']\n['cat6', 'cat8', 'dog9', 'cat4', 'dog8', 'dog5', 'cat2', 'cat3', 'cat9', 'dog0', 'dog3', 'cat0', 'dog1', 'dog2', 'dog4', 'cat5', 'cat1', 'dog6', 'cat7', 'dog7']"
  },
  {
    "objectID": "posts/2022-11-30-teaching-time.html",
    "href": "posts/2022-11-30-teaching-time.html",
    "title": "5-7 Lesson and HW",
    "section": "",
    "text": "Here we will focus on:\n\nbasics of Booleans\nits relationship with binary\nrelational operators\nLogical Operators\n\n\n\n\n\nA data type with two possible values: true or false\n\n\n\n\nSo similar yet so different. - Boolean math and binary notation both use the same two ciphers: 1 and 0. - However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) - On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size\n\n\n\n\nA Boolean value is either TRUE or FALSE\nThe AP Exam will provide you with a reference sheet with the operators below.\n\n\n\nA few ways these operators could be used…\n\n\n\n\n\n\nHow could you use operators to determine if the average of 5 grades is greater than 80?\nWith the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False)\nTry it in as few steps as possible!\nBe creative! There are obviously TONS of different practical solutions\n\n\ngrade1 = 90\ngrade2 = 65\ngrade3 = 60\ngrade4 = 75\ngrade5 = 95\n\navg = (grade1 + grade2 + grade3 + grade4 + grade5) / 5\n\nif avg > 80:\n    print(\"true\")\nelse:\n    print(\"less than 80\")\n\nless than 90\n\n\n\n\n\n\nprint(\"100 == 100:\",100==100)\nprint(\"Hello == Adios:\",\"greeting\"==\"farewell\")\nprint(\"Hello != Adios:\",\"greeting\"!=\"farewell\")\nprint(\"Hello == Hola:\",\"greeting\"==\"greeting\")\nprint(\"5>=4:\", 5>=4)\nprint ('')\n\n# Notice that relational operators can even work on lists!\n# For lists, the relational operator compares each respective component until an answer is derived\n\nprint(\"['a','b','c'] > ['x','y','z']:\", ['a','b','c'] > ['x','y','z'])\nprint(\"[1,2,3,5] > [1,2,3,4]:\", [1,2,3,5] > [1,2,3,4])\nprint(\"[1,2,3,5] < [1,2,3,4]:\", [1,2,3,5] < [1,2,3,4])\nprint(\"[1,2,3,5] == [1,2,3,4]:\", [1,2,3,5] == [1,2,3,4])\n\n100 == 100: True\nHello == Adios: False\nHello != Adios: True\nHello == Hola: True\n5>=4: True\n\n['a','b','c'] > ['x','y','z']: False\n[1,2,3,5] > [1,2,3,4]: True\n[1,2,3,5] < [1,2,3,4]: False\n[1,2,3,5] == [1,2,3,4]: False\n\n\n\n\n\nThese types of operators don’t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result - AND : returns TRUE if the operands around it are TRUE - OR : returns TRUE if at least one operand is TRUE - NOT : returns TRUE if the following boolean is FALSE\n\n\n\n# Output TRUE  using OR\nprint(\"1 > 2 or 5 < 12:\",)\n# Output TRUE  using OR ^\n\nif 1 < 2 or 5 < 12:\n    print(\"True\")\n\n# Output FALSE using NOT\nprint(\"24 > 8:\",)\nif not 24 > 25:\n    print(\"stuff\")\n\n# Output FALSE using AND\nprint(\"10 > 20:\",)\n# how do this?\n\n1 > 2 or 5 < 12:\nTrue\n24 > 8:\nstuff\n10 > 20:"
  },
  {
    "objectID": "posts/2022-11-30-teaching-time.html#focusing-on-selection",
    "href": "posts/2022-11-30-teaching-time.html#focusing-on-selection",
    "title": "5-7 Lesson and HW",
    "section": "Focusing on Selection",
    "text": "Focusing on Selection\nSelection: uses a condition that evaluates to true or false\nSelection determines which part of an algorithm are executed based on a condition being true or false\nAlgorithm is a finite set of instructions that accomplish a specific task"
  },
  {
    "objectID": "posts/2022-11-30-teaching-time.html#conditional-statements",
    "href": "posts/2022-11-30-teaching-time.html#conditional-statements",
    "title": "5-7 Lesson and HW",
    "section": "Conditional Statements",
    "text": "Conditional Statements\nAlso known as “if statements”\nCan be seen as if statements or if blocks\n\nCan also be seen as if else statements or if else-blocks \n\nx = 20\ny = 10\nif x > y:\n    print(\"x is greater than y\")\n\nx is greater than y\n\n\n\nx = 20\ny = 10\nif x > y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is not greater than y\")\n\nx is greater than y"
  },
  {
    "objectID": "posts/2022-11-30-teaching-time.html#participation",
    "href": "posts/2022-11-30-teaching-time.html#participation",
    "title": "5-7 Lesson and HW",
    "section": "Participation",
    "text": "Participation\n-Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum.\n\nnum1 =\nnum2 =\nsum = num1 + num2"
  },
  {
    "objectID": "posts/2022-11-30-teaching-time.html#lesson-overview---3.7-nested-conditionals",
    "href": "posts/2022-11-30-teaching-time.html#lesson-overview---3.7-nested-conditionals",
    "title": "5-7 Lesson and HW",
    "section": "Lesson Overview - 3.7 Nested Conditionals",
    "text": "Lesson Overview - 3.7 Nested Conditionals\n\nNested conditional statements consist of conditional statements within other conditional statements\nUtilizes “if else” statements within “if else” statements\nBasics of a nested conditional: \nBlock Coding Visual of Nested Conditionals: \nExample Psuedocode of Nested Conditional Statements"
  },
  {
    "objectID": "posts/2022-11-30-teaching-time.html#writing-nested-code-activity",
    "href": "posts/2022-11-30-teaching-time.html#writing-nested-code-activity",
    "title": "5-7 Lesson and HW",
    "section": "Writing Nested Code Activity",
    "text": "Writing Nested Code Activity\n\nWrite a program that fits these conditions using nested conditionals:\n\nIf a person has at least 8 hours, they are experienced\nIf a person is experienced their salary is 90k, if they have ten hours or above their salary 150k\nIf a person is inexperienced their salary is always 50k\nprint the salary of the person at the end and whether they are experienced or not"
  },
  {
    "objectID": "posts/2022-11-30-teaching-time.html#hacks-assignments",
    "href": "posts/2022-11-30-teaching-time.html#hacks-assignments",
    "title": "5-7 Lesson and HW",
    "section": "Hacks Assignments:",
    "text": "Hacks Assignments:\nConditionals:\n\nWrite a program that fits these conditions using nested conditionals:\n\nIf the product is expired, print “this product is no good”\nIf the cost is above 50 dollars, and the product isn’t expired, print “this product is too expensive”\nIf the cost is 25 dollars but under 50, and the product isn’t expired, print “this is a regular product”\nIf the cost is under 25 dollars, print “this is a cheap product”\n\n\n\n# Feel free to use JS or Python - we won't discriminate whilst grading you!\n# Here is a python template for you to use.\n\nproduct = {\n    \"expired\":\"no\",\n    \"cost\": 29,\n}\n\nexpired = \"no\"\ncost = 300\n\nif expired == \"no\":\n    if cost > 50:\n        print(\"this product is too expensive\")\n        exit\n    if cost > 25:\n        print(\"this is a regular product\")\n        exit\nelse:\n    print(\"this product is no good\")\nif cost < 25:\n    print(\"this is a cheap product\") #I am following the instructions exactly, it says to print this regardless of the expired status\n\nthis product is too expensive\nthis is a regular product\n\n\nBoolean/Conditionals: - Create a multiple choice quiz that … - uses Boolean expressions - uses Logical operators - uses Conditional statements - prompts quiz-taker with multiple options (only one can be right) - has at least 3 questions - Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined\n\nqa = [\n    [\"Question1\", [\"correctanwser\", \"answer2\", \"answer3\"]],\n    [\"Who is the best teacher\", [\"Jeffrey Fonseca\", \"correctMr. Mort\", \"someone else\"]]\n]\n\ncorrect = 0\n\nfor q in qa:\n    print(q[0], \"\\n\")\n    for itr,a in enumerate(q[1]):\n        if q[1][itr][0:7] == \"correct\":\n            print(itr +1, \":\",q[1][itr][7:])\n            right = itr\n        else:\n            print(itr +1, \":\",q[1][itr])\n    answer = int(input(\"select the answer\"))\n    if answer - 1 == right:\n        correct +=1\n    print(\"\\n\")\n\n\nprint(\"You got\",correct,\"questions right!\")\n\nQuestion1 \n\n1 : anwser\n2 : answer2\n3 : answer3\n\n\nWho is the best teacher \n\n1 : Jeffrey Fonseca\n2 : Mr. Mort\n3 : someone else\n\n\nYou got 2 questions right!"
  },
  {
    "objectID": "posts/2022-12-05-final_iteration_lesson.html",
    "href": "posts/2022-12-05-final_iteration_lesson.html",
    "title": "8 and 10 Lesson and HW",
    "section": "",
    "text": "Lists: a sequence of variables - we can use lists to store multiple items into one variable - used to store collections of data - changeable, ordered, allow duplicates\n\n\n\nfruits = [\"apple\", \"grape\", \"strawberry\"]\nprint (fruits)\n\n['apple', 'grape', 'strawberry']\n\n\n\nconst fruits = [\"apple\", \"grape\", \"strawberry\"]\n\n\nfruits = [apple, grape, strawberry]\n\n\n\n\n\nbrands = [\"nike\", \"adidas\", \"underarmour\"] #string\nnumbers = [1, 2, 3, 4, 5] #integer\ntruefalse = [True, False, True] #boolean\n\n\n\n\n\nTuple: collection that is ordered, unchangeable, allows duplicates\nSet: collection that is unordered, unchangeable, doesn’t allow duplicates\nDictionary: collection that is ordered, changeable, doesn’t allow duplicates\n\n\n\n\n\nIndex: a term used to sort data in order to reference to an element in a list (allows for duplicates)\nElements: the values in the list assigned to an index\n\n\nfruits = [\"apple\", \"grape\", \"strawberry\"]\nindex = 1\n\nprint (fruits[index])\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\nDefinition\nExample\n\n\n\n\nappend()\nadds element to the end of the list\nfruits.append(“watermelon”)\n\n\nindex()\nreturns the index of the first element with the specified value\nfruits.index(“apple”)\n\n\ninsert()\nadds element at given position\nfruits.insert(1, “watermelon”)\n\n\nremove()\nremoves the first item with the specified value\nfruits.remove(“strawberry”)\n\n\nreverse()\nreverses the list order\nfruits.reverse()\n\n\nsort()\nsorts the list\nfruits.sort()\n\n\ncount()\nreturns the amount of elements with the specified value\nfruits.count(“apple”)\n\n\ncopy()\nreturns a copy of the list\nfruits.copy()\n\n\nclear()\nremoves the elements from the list\nfruits.clear()\n\n\n\n\nsports = [\"football\", \"soccer\", \"baseball\", \"basketball\"]\n\n# change the value \"soccer\" to \"hockey\"\nprint (sports)\n\n\nsports = [\"football\", \"soccer\", \"baseball\", \"basketball\"]\n\n# add \"golf\" as the 3rd element in the list\nprint (sports)\n\n\n\n\nDetermine the output of the code segment\n\n\n\n\npic"
  },
  {
    "objectID": "posts/2022-12-05-final_iteration_lesson.html#first-what-not-to-do",
    "href": "posts/2022-12-05-final_iteration_lesson.html#first-what-not-to-do",
    "title": "8 and 10 Lesson and HW",
    "section": "First, what not to do",
    "text": "First, what not to do\n\nIteration is important for your time and sanity\n\n\nprint(\"alpha\")\nprint(\"bravo\")\nprint(\"charlie\")\nprint(\"delta\")\nprint(\"echo\")\nprint(\"foxtrot\")\nprint(\"golf\")\nprint(\"hotel\")\nprint(\"india\")\nprint(\"juliett\")\nprint(\"kilo\")\nprint(\"lima\")\nprint(\"mike\")\nprint(\"november\")\nprint(\"oscar\")\nprint(\"papa\")\nprint(\"quebec\")\nprint(\"romeo\")\nprint(\"sierra\")\nprint(\"tango\")\nprint(\"uniform\")\nprint(\"victor\")\nprint(\"whiskey\")\nprint(\"x-ray\")\nprint(\"yankee\")\nprint(\"zulu\")\n#please help me \n\nalpha\nbravo\ncharlie\ndelta\necho\nfoxtrot\ngolf\nhotel\nindia\njuliett\nkilo\nlima\nmike\nnovember\noscar\npapa\nquebec\nromeo\nsierra\ntango\nuniform\nvictor\nwhiskey\nx-ray\nyankee\nzulu\n\n\n\nCoding all of these individually takes a lot of unnecessary time, how can we shorten this time?"
  },
  {
    "objectID": "posts/2022-12-05-final_iteration_lesson.html#iteration-1",
    "href": "posts/2022-12-05-final_iteration_lesson.html#iteration-1",
    "title": "8 and 10 Lesson and HW",
    "section": "Iteration",
    "text": "Iteration\n\nIteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There’s a lot of types of iteration though, what to use? How do we apply iteration to lists?\n\n\nSome methods include using a “for loop”, using a “for loop and range()”, using a “while loop”, and using comprehension\n\n\nLists, tuples, dictionaries, and sets are iterable objects. They are the ‘containers’ that store the data to iterate.\n\n\nEach of these containers are able to iterate with the iter() command.\n\n\nThere are 2 types of iteration: definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met\n\n\n# An example of a for loop\n\nfor variable in iterable: \n    statement()\n\n\nIterator? Iterable? Iteration?\n\nWhen an object is iterable it can be used in an iteration\nWhen passed through the function iter() it returns an iterator\nStrings, lists, dictionaries, sets and tuples are all examples of iterable objects.\n\n\n# Using an example of iter()\na = ['alpha', 'bravo', 'charlie']\n\nitr = iter(a)\nprint(iter(a))\nprint(next(itr))\nprint(iter(a))\nprint(next(itr))\nprint(next(itr))\n\nitr2 = iter(a)\n\nprint(itr2)\n\n<list_iterator object at 0x7f39a10accd0>\nalpha\n<list_iterator object at 0x7f39a10accd0>\nbravo\ncharlie\n<list_iterator object at 0x7f39a10ac8e0>\n\n\n\nfor idx, i in enumerate(a):\n    print(i, idx)\n\nprint(enumerate(a))\n\nfor idx, i in a:\n    print(i, idx)   \n\nalpha 0\nbravo 1\ncharlie 2\n<enumerate object at 0x7f39a19cc600>\n\n\nValueError: too many values to unpack (expected 2)\n\n\n\n\nLoops\n\nWell, above is basically just printing them again, so how do we takes these iterators into something we can make use for?\nLoops take essentially what we did above and automates it, here are some examples.\n\n\n# Using a for loop \nlist = [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\", \"Foxtrot\", \"Golf\", \"Hotel\", \"India\", \"Juliett\", \"Kilo\", \"Lima\", \"Mike\", \"November\", \"Oscar\", \"Papa\", \"Quebec\", \"Romeo\", \"Sierra\", \"Tango\", \"Uniform\", \"Victor\", \"Whiskey\", \"X-ray\", \"Yankee\", \"Zulu\"]\n\n# using a for loop \nfor i in list:\n    #for item in the list, print the item \n    print(i)\n    \n\n\n# Using a for loop and range()\nlist = [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\", \"Foxtrot\", \"Golf\", \"Hotel\", \"India\", \"Juliett\", \"Kilo\", \"Lima\", \"Mike\", \"November\", \"Oscar\", \"Papa\", \"Quebec\", \"Romeo\", \"Sierra\", \"Tango\", \"Uniform\", \"Victor\", \"Whiskey\", \"X-ray\", \"Yankee\", \"Zulu\"]\n\n# Taking the length of the list \nlengthList = len(list) \n\n# Iteration using the amount of items in the list\nfor i in range(lengthList):\n    print(list[i])\n\n\n# Iteration using the while loop\nlist = [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\", \"Foxtrot\", \"Golf\", \"Hotel\", \"India\", \"Juliett\", \"Kilo\", \"Lima\", \"Mike\", \"November\", \"Oscar\", \"Papa\", \"Quebec\", \"Romeo\", \"Sierra\", \"Tango\", \"Uniform\", \"Victor\", \"Whiskey\", \"X-ray\", \"Yankee\", \"Zulu\"]\n\n# Once again, taking the length of the list\nlengthList = len(list)\n\n# Setting the variable we are going to use as 0\ni=0 \n\n# Iteration using the while loop \n# Argument saying WHILE a certain variable is a certain condition, the code should run\nwhile i < lengthList:\n    print(list[i])\n    i += 1\n\n\n\nUsing the range() function\n\nBut wait, there’s more - Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range()\n\n\n# An example of a range() function, note that any given list or set starts with assigned value 0\nx = range(5)\n\nfor n in x:\n    print(n)\n\n0\n1\n2\n3\n4\n\n\n\n\nElse, elif, and break\n\nFor when 1 statement isn’t enough - Else: when the condition does not meet, do statement() - Elif: when the condition does not meet, but meets another condition, do statement() - Break: stop the loop"
  },
  {
    "objectID": "posts/2022-12-05-final_iteration_lesson.html#hw-iteration",
    "href": "posts/2022-12-05-final_iteration_lesson.html#hw-iteration",
    "title": "8 and 10 Lesson and HW",
    "section": "HW Iteration",
    "text": "HW Iteration\nUse the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word\nEx:\nlist ->\nlima india sierra tango\n\nwords = [\"alfa\", \"bravo\", \"charlie\", \"delta\", \"echo\", \"foxtrot\", \"golf\", \"hotel\", \"india\", \"juliett\", \"kilo\",\n\"lima\", \"mike\", \"november\", \"oscar\", \"papa\", \"quebec\", \"romeo\", \"sierra\", \"tango\", \"uniform\", \"victor\", \"whiskey\", \"xray\", \"yankee\", \"zulu\"]\n\ninp = input().lower()\n\nfor k in inp:\n    for i in words:\n        if i[0] == k:\n            print(i)\n\nhotel\necho\nlima\nlima\noscar"
  },
  {
    "objectID": "posts/2022-12-05-final_iteration_lesson.html#d-arrays",
    "href": "posts/2022-12-05-final_iteration_lesson.html#d-arrays",
    "title": "8 and 10 Lesson and HW",
    "section": "2D Arrays",
    "text": "2D Arrays\nA 2D array is simply just a list of lists. The example below is technically correct but…\n\n# Example matrix\n\nkeypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [\" \", 0, \" \"]]\n\nConventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand.\n\n# Better example matrix\nkeypad =   [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9],\n            [\" \", 0, \" \"]]"
  },
  {
    "objectID": "posts/2022-12-05-final_iteration_lesson.html#printing-a-2d-array",
    "href": "posts/2022-12-05-final_iteration_lesson.html#printing-a-2d-array",
    "title": "8 and 10 Lesson and HW",
    "section": "Printing a 2D Array",
    "text": "Printing a 2D Array\nWe already know that we can’t just print the matrix by calling it. We need to iterate through it to print it.\n\n# Nested loops using ij indexes\ndef print_matrix1(matrix): \n    for i in range(len(matrix)):  # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix\n        for j in range(len(matrix[i])):  # inner for loop. This runs on the length of the i'th row in the matrix (j changes for each row with a different length)\n            print(matrix[i][j], end=\" \")  # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=\" \" changes the end value to space, not a new line.\n        print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row\n\n\nprint(\"Raw matrix (list of lists): \")\nprint(keypad)\nprint(\"Matrix printed using nested for loop iteration:\")\nprint_matrix1(keypad)\nprint()\n\nRaw matrix (list of lists): \n\n\nNameError: name 'keypad' is not defined\n\n\n\ndef print_matrix2(matrix):\n    for row in matrix:  # Iterates through each \"row\" of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it's own list. in this syntax the list is stored in \"row\".\n        for col in row:  # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in col.\n            print(col, end=\" \") # Same as 1\n        print() # Same as 1\n\nprint_matrix2(keypad)\n\n1 2 3 \n4 5 6 \n7 8 9 \n  0   \n\n\n\nMore Functions\nTry to find another way to print the matrix. Only complete one of the two (unless you’d like to do both). Below is a hint\n\nfruit = [\"apples\", \"bananas\", \"grapes\"]\nprint(fruit)\nprint(*fruit) # Multiplies one list several times, found out on the wikibooks page for python programming\nprint(3*fruit)\n\n['apples', 'bananas', 'grapes']\napples bananas grapes\n['apples', 'bananas', 'grapes', 'apples', 'bananas', 'grapes', 'apples', 'bananas', 'grapes']\n\n\n\ndef print_matrix3(m):\n    rows = [\" \".join(str(i) for i in row) for row in m]\n    print(\"\\n\".join(rows))\n\nprint_matrix3(keypad)\n\n1 2 3\n4 5 6\n7 8 9\n  0  \n\n\nAlternatively, find a way to print the matrix using the iter() function you already learned. Or use both!\n\ndef print_matrix4(matrix):\n    code = \"your code goes here\"\n\n\nkeyboard = [[\"`\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \"-\", \"=\"],\n            [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\", \"[\", \"]\"],\n            [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \";\", \"'\"],\n            [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\", \",\", \".\", \"/\"]]\n\nfor i in range(len(keyboard)):  \n        for j in range(len(keyboard[i])):\n            print(keyboard[i][j], end=\" \")\n        print()\n\n` 1 2 3 4 5 6 7 8 9 0 - = \nQ W E R T Y U I O P [ ] \nA S D F G H J K L ; ' \nZ X C V B N M , . / \n\n\n\n\n\n<built-in method upper of str object at 0x7ff7b034b170>\n\n\nPrint what month you were born and how old you are by iterating through the keyboard (don’t just write a string).\n\nkeyboard = [[\"`\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \"-\", \"=\"],\n            [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\", \"[\", \"]\"],\n            [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \";\", \"'\"],\n            [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\", \",\", \".\", \"/\"]]\ndate = \"05/08/2005\"\ndatelist = []\nfor i in date:\n    datelist.append(i)\n\nfor i in range(len(keyboard)):  \n        for j in range(len(keyboard[i])):\n            print(keyboard[i][j], end=\" \")\n        print()\n\nstring = \"\"\nfor row in keyboard:\n    for key in row:\n        if key in datelist:\n            string += key\nprint(\"\\n\", string)\n\n` 1 2 3 4 5 6 7 8 9 0 - = \nQ W E R T Y U I O P [ ] \nA S D F G H J K L ; ' \nZ X C V B N M , . / \n\n /\n\n\n\n\nChallenge\nChange all of the letters that you DIDN’T print above to spaces, ” “, and then print the full keyboard. (the things you did print should remain in the same spot)\nAlternative Challenge: If you would prefer, animate it using some form of delay so it flashes one of your letters at a time on the board in order and repeats. (this one may be slightly more intuitive)\nDO NOT HARD CODE THIS. Don’t make it harder on yourself, iterate through, make it abstract so it can be used dynamically. You should be able to input any string and your code should work.\n\nkeyboard = [[\"`\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \"-\", \"=\"],\n            [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\", \"[\", \"]\"],\n            [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \";\", \"'\"],\n            [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\", \",\", \".\", \"/\"]]\n\nnamelist = []\nname = input(\"What is your name?\")\nname = name.upper()\nfor i in name:\n    namelist.append(i)\n\nfor i in range(len(keyboard)):  \n        for j in range(len(keyboard[i])):\n            if keyboard[i][j] in namelist:\n                print(keyboard[i][j], end=\" \")\n            else:\n                print(\" \", end=\" \") \n        print()\n\n                          \n  W                     \nA S D                 \n                    \n\n\nIf you get stuck you can just make a picture with an array and print it (I will grade based on how good it looks)\nI do expect an attempt so write some code to show you tried the challenge."
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html",
    "href": "posts/2022-12-06-lessoncomplete.html",
    "title": "3.9 and 3.11 Lesson",
    "section": "",
    "text": "wget allows you to essentially clone someone elses file on Github into a directory of your choosing\n\nYou are able to edit your own copy of the file without affecting the original\n\n\n\n\n\nOpen your VSCode terminal (Terminal > New Terminal)\nNavigate to your Fastpages Blog using cd\nNavigate to the _notebooks directory in your Fastpages\nCopy and paste this into the terminal: **wget https://raw.githubusercontent.com/Azeem-Khan1/TripleAJ/master/_notebooks/2022-12-06-lessonComplete.ipynb**\nYou’re all set! you can use this copy of our notebook to help you take notes and participate during the lesson\n\nPlease raise your hand if you are having trouble with wget and we will come around and help you\n\n\n\nNote: if you have a separate notebook that you take notes on and you also want to do your practice in that notebook, you can copy and paste cells from this notebook by left clicking next to any markdown or code cell (indicating that it is selected), do ctl+c or cmd+c, and go to the desired notebook and do ctl+v or cmd+v (if that doesn’t work, try just c and v with no ctl or cmd)"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#lesson-1-defining-algorithms",
    "href": "posts/2022-12-06-lessoncomplete.html#lesson-1-defining-algorithms",
    "title": "3.9 and 3.11 Lesson",
    "section": "Lesson 1 | Defining Algorithms",
    "text": "Lesson 1 | Defining Algorithms\nWhat is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions!\n\nAlgorithms can be written in different ways and still accomplish the same tasks\nAlgorithms that appear similar can yield different side effects or results.\nSome conditional statements can be written as the same as Boolean expressions (VICE VERSA)\nDifferent algorithms can be developed or use to solve the same problem."
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#example-1-what-happens-if-we-test-the-algorithm-with-different-outputs",
    "href": "posts/2022-12-06-lessoncomplete.html#example-1-what-happens-if-we-test-the-algorithm-with-different-outputs",
    "title": "3.9 and 3.11 Lesson",
    "section": "Example 1 | What happens if we test the algorithm with different outputs?",
    "text": "Example 1 | What happens if we test the algorithm with different outputs?\n\n\n\nf\n\n\nThe pseudocode above is translated to python for you.\nRecord what your outputs are when you enter 95 degrees F, does the algorithm yield the same result?\nThe conditional below is nested\n\ntemp = int(input(\"Select a temperature from 0 to 99 degrees F\"))\nif (temp >= 90):\n    print(\"It's too hot outside!\")\nelse:\n    if (temp >= 65):\n        print(\"Sure I will play outside!\")\n    else: \n        print(\"It is too cold outside!\")\n# Input 54 and then 95, what do you notice?\n\n\ntemp = int(input(\"Select a temperature from 0 to 99 degrees F\"))\nif (temp >= 90):\n    print(\"It's too hot outside!\")\nif (temp >= 65):\n    print(\"Sure I will play outside!\")\nif (temp < 65):\n    print(\"It is too cold outside!\")\n    # Input 54 and then Input 95, what do you notice?"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#now-record-with-another-output",
    "href": "posts/2022-12-06-lessoncomplete.html#now-record-with-another-output",
    "title": "3.9 and 3.11 Lesson",
    "section": "NOW RECORD with another output",
    "text": "NOW RECORD with another output\nRecord what your outputs are when you enter 54, does the algorithm yield the same result this time?\n*Now use 95 as an input for the two code blocks above.\nEven though an algorithm’s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code’s output is."
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#conditionals-vs.-booleans",
    "href": "posts/2022-12-06-lessoncomplete.html#conditionals-vs.-booleans",
    "title": "3.9 and 3.11 Lesson",
    "section": "Conditionals vs. Booleans",
    "text": "Conditionals vs. Booleans\nThe condition and instructions are what differ, that’s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false."
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#exercise",
    "href": "posts/2022-12-06-lessoncomplete.html#exercise",
    "title": "3.9 and 3.11 Lesson",
    "section": "Exercise",
    "text": "Exercise\nLearning how to utilize conditionals and booleans are important for developing algorithms. Use this exercise to help you.\nCan either Boolean expression on the right replace the conditional on the left? Assume isWeekday and isHoliday are Boolean variables.\n\n\n\nf\n\n\n*NOTE = you can edit the variables to check the conditions needed!\n\nIsHoliday = False\nIsWeekday = True\nif IsHoliday:\n    driveWork = True\nelse: \n    if IsWeekday: \n        driveWork = True\n    else: \n        driveWork = False\nprint(driveWork)"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#logically-thinking-about-conditionals-and-booleans",
    "href": "posts/2022-12-06-lessoncomplete.html#logically-thinking-about-conditionals-and-booleans",
    "title": "3.9 and 3.11 Lesson",
    "section": "Logically thinking about conditionals and booleans",
    "text": "Logically thinking about conditionals and booleans\nNow the problem may seem confusing, but the best way to develop an algorithm is to think about all the possible results that can be potentially be outputted.\nSo if IsHoliday is set to true, then driveWork is automatically equal to false and it does not matter what value of isWeekday is. This must mean that one of the conditionals must be NOT IsHoliday.\nIn the case that lets say IsHoliday is set to false, then the variable for weekday needs to be checked. If it’s true then driveWork is true, if it’s false then driveWork is false. This must mean that the other conditional isWeekday.\nCombining both conditionals, you get option 2, which is not IsHoliday and IsWeekday. This is why option 2 is right!\n\n\n\nf"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#example-3-conditionals-vs-booleans",
    "href": "posts/2022-12-06-lessoncomplete.html#example-3-conditionals-vs-booleans",
    "title": "3.9 and 3.11 Lesson",
    "section": "Example 3 | Conditionals vs Booleans",
    "text": "Example 3 | Conditionals vs Booleans\nThe following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended?\n\n\n\nf\n\n\nBelow, I have translated the block code into python, import this to your jupyter notebook and record the result. What do you notice?"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#first-block",
    "href": "posts/2022-12-06-lessoncomplete.html#first-block",
    "title": "3.9 and 3.11 Lesson",
    "section": "First block",
    "text": "First block\n\nsum = 1\ncounter = 3\n#iteration\nvar = 0 \nwhile (var < 4): #while the var is <= 4, it executes those commands, once it exceeds it hits the else command\n    sum = sum + counter\n    counter = counter + 2\n    var = var + 1\n    # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms.\nelse:\n    print(sum)\n\n25"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#second-block",
    "href": "posts/2022-12-06-lessoncomplete.html#second-block",
    "title": "3.9 and 3.11 Lesson",
    "section": "Second block",
    "text": "Second block\n\nsum = 0\ncounter = 9\n#iteration\nwhile (counter >= 1): \n    sum = sum + counter\n    counter = counter - 2\nprint(sum)\n\n25\n\n\nWhen we start our initializing left sum as 1 counter as 3 we had no iterations yet. Remember we’re going to have to repeat this four times because the block code prompts us to repeat 4 times, so we iterate. So as we go through and follow what the block gives us.\n\n\n\nf\n\n\nSo you see that the sum does work, it does sum up the odd numbers from 1-9\nNow lets look at the right block.\nSum is set to 0 Counter is set to 9 We must repeat until the counter < 1 is true.\nSo we keep adding until -1, that is when the counter < 1 is true, so we stop\n\n\n\nf\n\n\nSo why is it important to understand that algorithms can be written in different ways and still accomplish the same task?\nAn algorithm is beautiful that way, just because you think of solving a problem differently, doesn’t mean your wrong,"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#flowcharts",
    "href": "posts/2022-12-06-lessoncomplete.html#flowcharts",
    "title": "3.9 and 3.11 Lesson",
    "section": "Flowcharts",
    "text": "Flowcharts\n\nFlowcharts can help you visualize the functionality of an algorithm\nThey are a good way to double check whether or not your algorithm is achieving its purpose\n\n\nHow To Set Up A Flowchart\n\nlabel the start point\nDefine any and all variables you may need\nConsider the first question you want the algorithm to ask\nWrite what you want the algorithm to do if the answer to that question is yes (or true)\nWrite what you want the algorithm to do if the answer to that question is no (or false)\n\nSteps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code)  \n\nWrite out all necessary steps for the algorithm to function properly\nYou may want your algorithm to iterate some steps until a condition is met\n\nYou can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement  \n\ndetermine a way to reach the end goal"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#selection-vs.-iteration",
    "href": "posts/2022-12-06-lessoncomplete.html#selection-vs.-iteration",
    "title": "3.9 and 3.11 Lesson",
    "section": "Selection vs. Iteration",
    "text": "Selection vs. Iteration\n\nSelection:\n\nA process used in algorithms where a conditional if-statement leads to one of two outcomes\n\nOutcome 1: if the conditional statement is true, something will happen\nOutcome 2: if the conditional statement is false, something else will happen\nEx: see Example A\n\n\nIteration\n\nA process used in algorithms that allows certain things to happen until a condition is satisfied\n\nOnce the condition is satisfied, then an outcome is produced\nThis can take the form of a for-loop, while-loop, and/or if-statement"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#example-a",
    "href": "posts/2022-12-06-lessoncomplete.html#example-a",
    "title": "3.9 and 3.11 Lesson",
    "section": "Example A",
    "text": "Example A\n\nConsider this situation:\n\nYou are shopping for your favorite food at your favorite supermarket\nYou see that there is a sale on wheat products for 35% off\nThere is another sale on produce for 20% off\nThese sales are mutually exclusive\nTax on all items is 8%\n\nYour TASK:\n\nCreate a flowchart for an algorithm that can be used to calculate the cost of your favorite item"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#example-a-possible-solution-using-selection",
    "href": "posts/2022-12-06-lessoncomplete.html#example-a-possible-solution-using-selection",
    "title": "3.9 and 3.11 Lesson",
    "section": "Example A Possible Solution (using Selection)",
    "text": "Example A Possible Solution (using Selection)\n\n\n\nFlowchart for Example A"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#example-in-class",
    "href": "posts/2022-12-06-lessoncomplete.html#example-in-class",
    "title": "3.9 and 3.11 Lesson",
    "section": "Example in Class",
    "text": "Example in Class\n\n\n\nCollatz Conjecture"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#rules",
    "href": "posts/2022-12-06-lessoncomplete.html#rules",
    "title": "3.9 and 3.11 Lesson",
    "section": "Rules",
    "text": "Rules\n\nstep/rule 1: start with any positive integer\nstep/rule 2: if the preceding term is even; divide by 2\nstep/rule 3: if the preceding term is odd; multiply by 3 and add 1\nstep/rule 4: repeat steps until you arrive at 1\nfact: the sequence should ALWAYS end up at 1 if repeated."
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#algorithm-to-start-determining-whether-a-number-is-even-or-odd",
    "href": "posts/2022-12-06-lessoncomplete.html#algorithm-to-start-determining-whether-a-number-is-even-or-odd",
    "title": "3.9 and 3.11 Lesson",
    "section": "Algorithm to Start (Determining Whether a Number is Even or Odd)",
    "text": "Algorithm to Start (Determining Whether a Number is Even or Odd)\n\nprint(\"choose value for x\")\n\nvarx=int(input(\"Enter any positive Integer\"))\n\nif (varx %2 == 0):\n    print(\"the number is even\")\n\nelse:\n    print(\"the number is odd\")\n# Run this cell to see how it works"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#how-can-we-modify-this-code-to-match-our-goal",
    "href": "posts/2022-12-06-lessoncomplete.html#how-can-we-modify-this-code-to-match-our-goal",
    "title": "3.9 and 3.11 Lesson",
    "section": "How can we modify this code to match our goal",
    "text": "How can we modify this code to match our goal\n\nHint: uses arithmetic operations\nHint: look at the steps of the equation and try and modify it to fit them\nMust display all numbers used in it\n\n\nSolution\n\nStep 1\n\nsteps/rules 2 & 3.\n\n\nprint(\"choose value for x\")\n\nvarx=int(input(\"Enter any positive Integer\"))\n\nif (varx %2 == 0):\n     varx == varx/2       # Change print to the function\n\nelse:\n    varx == varx * 3 + 1      # Change print to the function\n\nprint(varx)\n\n\n\nStep 2\n\nstep/rule 4; here we add the loop\n\n\nprint(\"choose value for x\")\n\nvarx=int(input(\"Enter any positive Integer\"))\n\nwhile varx != 1:\n\n    if (varx %2 == 0):\n        varx = varx/2       # Change print to the function\n\n    else:\n        varx = varx * 3 + 1      # Change print to the function\n\nprint(varx)\n\n\n\nStep 3\n\nDisplay all values throughout the algorithm\n\n\nprint(\"choose value for x\")\n\nvarx=int(input(\"Enter any positive Integer\"))\n\nprint(varx)\nwhile varx != 1:\n\n    if (varx %2 == 0):\n        varx = varx/2       \n        print(varx)               # add Display\n    else:\n        varx = varx * 3 + 1      \n        print(varx)               # add Display\nprint(varx)                       # Final # Should be 1 every time"
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#takeaways",
    "href": "posts/2022-12-06-lessoncomplete.html#takeaways",
    "title": "3.9 and 3.11 Lesson",
    "section": "Takeaways",
    "text": "Takeaways\n\nYou can use code you’ve previously wrote in order to make a project easier.\nBreaking algorithms down into steps can make things easier and more simple."
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#hacks",
    "href": "posts/2022-12-06-lessoncomplete.html#hacks",
    "title": "3.9 and 3.11 Lesson",
    "section": "Hacks",
    "text": "Hacks\n\ncreate another algorithm using a famous mathematical algorithm such as the “collatz conjecture.” and explain your steps in a post on a blog."
  },
  {
    "objectID": "posts/2022-12-06-lessoncomplete.html#binary-search-hacks",
    "href": "posts/2022-12-06-lessoncomplete.html#binary-search-hacks",
    "title": "3.9 and 3.11 Lesson",
    "section": "Binary Search Hacks",
    "text": "Binary Search Hacks\nUsing my example above and steps below, create your own iteration using binary search\nSteps\n\nCompare x with the middle element.\nIf x matches with the middle element, we return the mid index.\nElse if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half.\nElse if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half."
  },
  {
    "objectID": "posts/2022-12-07-developing-procedures.html",
    "href": "posts/2022-12-07-developing-procedures.html",
    "title": "Unit 3 Sections 12-13",
    "section": "",
    "text": "Slide 1: - A procedure is a named group of programming instructions that may have parameters and return values. - Procedures are referred to by different names, such as functions or methods, depending on the programing language. - Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. - A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called.\nSlide 2: - When calling procedures, it’s important to take notice to whether it returns data, or a block of statements. - If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. - If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable\nSlide 3:\n\nAssume the Temperature outside is Fahrenheit.\nThe procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius.\nConvert the following psuedocode to python\n\n\ndef convertFahrenheit(F):\n    C = (5 / 9) * (F - 32)\n    return C\n\ntemp = int(input(\"What is the temperature outside in Farenheit\"))\nconvertFahrenheit(temp)\n\n15.555555555555557"
  },
  {
    "objectID": "posts/2022-12-07-developing-procedures.html#developing-procedures",
    "href": "posts/2022-12-07-developing-procedures.html#developing-procedures",
    "title": "Unit 3 Sections 12-13",
    "section": "Developing Procedures",
    "text": "Developing Procedures\nSlide 8:\nPicking a descripitive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure.\nSlide 9:\nIn this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous.\n\nWhat would be a good name for this procedure?\nWhat parameters do we need for this procedure?\nTry writing this procedure out in python based on the given pseudocode\n\n\n# procedure goes here\n\ncurrentGrade <- currentPoints / 40\ncurrentGrade <- current Grade * 100\nif currentGrade > quizGrade\n    quizGrade <- currentGrade"
  },
  {
    "objectID": "posts/2022-12-07-developing-procedures.html#procedural-abstraction",
    "href": "posts/2022-12-07-developing-procedures.html#procedural-abstraction",
    "title": "Unit 3 Sections 12-13",
    "section": "Procedural Abstraction",
    "text": "Procedural Abstraction\n\nOne type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it\nThis is very helpful in managing complexity in a program\nSubdivision of a program into separate subprograms is called modularity\nA procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity\nWhen a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it\nSimply, procedural abstraction is naming and calling a prewritten procedure\nMaking sure to include the right arguments so the procedure can do what its supposed to do is crucial"
  },
  {
    "objectID": "posts/2022-12-07-developing-procedures.html#complexity-example",
    "href": "posts/2022-12-07-developing-procedures.html#complexity-example",
    "title": "Unit 3 Sections 12-13",
    "section": "Complexity Example",
    "text": "Complexity Example\nOne of the biggest advantages of procedural abstraction is managing complexity.\nThink about the process of simplifying the code? What do you think the advantage of the code segment on the left is?\n\n\n\nCode Segment 1\nCode Segment 2\n\n\n\n\nROTATE_LEFT()\ndetourLeft()\n\n\nMOVE_FORWARD()\nturnCorner()\n\n\nROTATE_RIGHT\nMOVE_FORWARD()\n\n\nMOVE_FORWARD()\nMOVE_FORWARD()\n\n\n\nMOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD()"
  },
  {
    "objectID": "posts/2022-12-07-developing-procedures.html#hacks",
    "href": "posts/2022-12-07-developing-procedures.html#hacks",
    "title": "Unit 3 Sections 12-13",
    "section": "Hacks",
    "text": "Hacks\n\nWrite a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier.\nPoints will be awarded based on creativity and functionality\n0.1 points will be deducted for late submissions\nSubmit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM.\n\n\nfrom sympy import *\ninit_printing(use_unicode=False, wrap_line=False)\nx = Symbol('x')\n\ndef inte():\n    indef = input((\"Definite integral? y/n\"))\n    if indef == \"y\":\n        start = float(input(\"Integrate from?\"))\n        end = float(input(\"Ending at?\"))\n        print(integrate(func, (x, start, end)))\n    print(sympify(integrate(func)))\n\ndef solv():\n    value = float(input(\"What value would you like to solve for?\"))\n    print(solve(func, x, value))\n\n\n    \n    \n\nfunc = sympify(input(\"What is the expression you are working with? One variable, x\"))\nprint(func)\n\ninte()\n\nx**2\nx**3/3\n\n\n\ninit_printing(use_unicode=False, wrap_line=False)\n\nx = Symbol('x')\nfunc = sympify(input(\"fucntion\"))\nvalue = float(input(\"value\"))\n\nprint(solve(func, x, value))\n\n[(0, 2.00000000000000)]\n\n\n\ninit_printing(use_unicode=False, wrap_line=False)\nx = Symbol('x')\nprint(sympify(\"x^2\"))\n\nx**2\n\n\n\nx = Symbol('x')\nsympify(\"x^2\")\n\nprint(sympify(x**2))\n\nx**2"
  },
  {
    "objectID": "posts/2022-12-2-Simulations Fun.html",
    "href": "posts/2022-12-2-Simulations Fun.html",
    "title": "Quartotest",
    "section": "",
    "text": "wordlist = []\nfor line in open(\"wordlist.txt\", \"r\"):\n    if len(line[:-2]) > 3: # gotta remove the newline character\n        wordlist.append(line[:-2])\n#creates a word list for me to work with\n\n\nlength = int(input(\"length\"))\nword = \"\"\n\nfor l in range(length):\n    letter = input(\"letter?\")\n    word = word + letter\n\nprint(word)\n# Word builder\n\n1111\n\n\n\nplayers = int(input(\"How many players?\"))\n\nwhile 2 > 1:\n    for p in range(players):\n        a = input(\"stuff\")\n        if a == \"stop\":\n            exit\n        print(p)\n\n\n# Player rotator\n\n\n# menu\noptions = [\"1: Add a letter\", \"2: Call a bluff\"]\ndef menu():\n    for o in options:\n        print(o)\n    choice = int(input(\"Make your choice, player\",p+1))\n\n\nplayers = int(input(\"how many players?\"))\nrnds = int(input(\"rounds?\"))\n\nfor i,r in enumerate(range(rnds)):\n    print(i)\n    print(i / )\n\n0\n1\n2\n3\n\n\n\n# Beginning of the game\nplayers = int(input(\"How many players?\"))\ngameEnded = False\nword = input(\"player 1, enter a letter to start:\")\n\nwhile gameEnded == False:\n    for p in range(players):\n        if p == 1:\n            continue\n        \n\n\nfrom IPython.display import clear_output\nimport time\n\nprint(\"stuff\")\ntime.sleep(2)\nclear_output()\n\n\nfrom IPython.display import clear_output\n\nfor i in range(10):\n    clear_output()\n    print(\"Hello World!\")\n\nHello World!\n\n\n\n# Initialize the grid of cells with random states\nfrom IPython.display import clear_output\nimport random\nimport time\nimport copy\n\nwidth = 10\nheight = 10\ngrid = [[random.choice([0, 1]) for x in range(width)] for y in range(height)]\nnewGrid = copy.deepcopy(grid)\n\n# Define the rules for updating the state of a cell\ndef update_cell(x, y):\n  # Count the number of live neighbors\n  neighbors = 0\n  for dx in [-1, 0, 1]:\n    for dy in [-1, 0, 1]:\n      if x + dy < 0 or x + dy > width:\n        continue\n      if y + dy < 0 or y + dy > height:\n        continue\n      if dx == 0 and dy == 0:\n        continue\n      neighbors += grid[x + dx][y + dy]\n      #if grid[x + dx][y + dy] == 1:\n        #neighbors += 1\n  \n  # Update the state of the cell based on the rules of the Game of Life\n  if grid[x][y] == 1:\n    if neighbors < 2 or neighbors > 3:\n      newGrid[x][y] = 0\n  else:\n    if neighbors == 3:\n      newGrid[x][y] = 1\n\ndef printGrid():\n  grid = copy.deepcopy(newGrid)\n  \n  rows = [\" \".join(str(i) for i in row) for row in grid]\n  print(\"\\n\".join(rows))\n    \n\n# Update the state of the grid over time\nfor i in range(10):\n  for x, xaxis in enumerate(grid):\n    for y, yaxis in enumerate(xaxis):\n      update_cell(x, y)\n  \n  time.sleep(1)\n  clear_output()\n\n\n\n  print(\"Generation \", i)\n  printGrid()\n\nIndexError: list index out of range\n\n\n\nrange(width)\n\nrange(0, 10)\n\n\n\nheight = float(input(\"height?\"))\n\nweight = input(\"weight\")\n\nstuff = height / 16\n\nstuff = stuff ** (1/2)\n\nprint(\"It will take\", stuff,\"seconds to fall!\")\n\nIt will take 1.118033988749895 seconds to fall!"
  },
  {
    "objectID": "posts/2022-12-dd-lesson.html",
    "href": "posts/2022-12-dd-lesson.html",
    "title": "Unit 3 Sections 17-18",
    "section": "",
    "text": "Set up your notebook by either wgetting the lesson or tracking it by your own (We would recommend wgetting since there are some fill in the blanks!)\nwget here: https://raw.githubusercontent.com/mmaxwu/Tri2-GroupFastpages/master/_notebooks/2022-12-dd-lesson.ipynb\n\n\n\nPurpose:\nThe purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum.\n\n\n\nThe ability of an algorithm to solve a problem in an efficient way\nAn efficient algorithm solves a problem quickly and with a minimum resources used, such as time and memory.\nHow do we determine if an algorithm is efficient or not?\nOne way we can do this is by determining the time complexity of the algorithm.\nAnother way is through .\n\n\n\n\n\nWhat did you and your team discuss? (record below)\nDjikstras algorithm. I watched a youtube video about this.\n\nAn ________ solution is __________________ that produces a solution that isn’t necessarily _____ but can be used when normal methods take forever\n\nDescribe the method used to solve the traveling merchant problem. (record below)\n\n\n\nPurpose:\nThe purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important.\nKey vocabulary: - Decision problem - Decidable problem - Undecidable problem\n\n\n\nA decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs: “yes” or “no”.\n\nThere are two types of decision problems that Collegeboard goes over: - Decidable Problems - Undecidable Problems\n\nA decidable is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not.\n\n\nAn undecidable problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem.\n\n\n\n\n\nA decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct.\n\n\nThe procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn’t, it returns false.\n\ndef divideThirteen(number):\n    if number % 13 == 0:\n        return True\n    else:\n        return False\n\nprint(divideThirteen(26))\nprint(divideThirteen(30))\n\nTrue\nFalse\n\n\n\n\n\n\n\n\nThe code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type “integer”, it’s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code.\n\ni = 0\nnumber = 1\ndef integerTest(n):\n    # Testing if the number is an integer\n    if n%1 ==0:\n        return True\n    else:\n        return False\n# Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever.\nwhile i == 0:\n    number += 1\n    if integerTest(number) == False:\n        i +=1\n        print(\"Done\")\n\n\n\n\nThe halting problem is an example of an undeciable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. > There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not.\n\n\n\n\nIn order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let’s call this algorithm HaltChecker.\nHaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of “halts”. If program P doesn’t halt(runs forever) with input I, HaltChecker returns an output of “never”. For example, in the code where it tests if variable number, the ________, so HaltChecker returns an output of ________.\nThen, we add another algorithm called Reverser which reverses HaltChecker’s output. So, if “never” is the output of HaltChecker, then the output of Reverser is ________. It’s also the same the other way around: if HaltChecker has an output of “halts”, then Reverser has an output of ________.\nWe combine these algorithms into one entire body of code.\nSince Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints “never” when in fact there is an end(As proved by HaltChecker), and how it also prints “halts” when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem.\n\n\n\n\n\n\nreverser\n\n\nCredits of diagram and example to Khan Academy\n\n\n\n\n\nQ: If Reverser is causing the problem, why not remove it?\nA: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate.\n\n\n\n\n\nNote that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever.\nHumans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems.\n\n\n\n\n\nCome up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem.\n\nchecked = True\ni = 2\nwhile checked:\n    if i % 2 == 0:\n        checked = True\n    else:\n        checked = False\n    i += 2\n\n# This loop stops if it detects that i is even, but i will never be even because i is \n\nKeyboardInterrupt: \n\n\n\nimport os\nwhile 1:\n    os.fork() # DO NOT RUN THIS it will CRASH your computer\n\n\n\n\nYour homework for Algorithmic Efficiency is pretty simple. 1. Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! 2. Label the number of loops done as x and the time (microseconds) to find the index as y 3. Connect the points 4. Do the same thing with the 2nd code 5. Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) 6. Insert images of the graph either in your blog or on review ticket\n\nimport time\n\ndef linear_search(lst, x):\n    start_time = time.perf_counter_ns() # records time (nanoseconds)\n    for i in range(len(lst)): # loops through the entire list \n\n        if lst[i] == x: # until the x value we are looking for is found\n            end_time = time.perf_counter_ns() # records time again\n            total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time\n            print(\"Found element after {} loops in {} microseconds\".format(i+1, total_time)) # prints the results\n            return print(\"Your number was found at\", i)\n            \n    end_time = time.perf_counter_ns() # records the time again\n    total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time\n    print(\"Element not found after {} loops in {} microseconds\".format(len(lst), total_time)) # prints the results\n    return \"Your number wasn't found :(\"\n\n\nlst = list(range(1, 10001)) # list with numbers 1-10000\n\nx = 5000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on)\n\nlinear_search(lst, x) # runs procedure\n\nFound element after 5000 loops in 595 microseconds\nYour number was found at 4999\n\n\n\nimport time \n\ndef binary_search(lt, x):\n    start_time = time.perf_counter_ns() # starts timer\n    low = 0 # sets the lower side \n    mid = 0 # sets mid value\n    high = len(lt) -1 # sets the higher side\n    num_loops = 0 # number of loops the search undergoes to find the x value\n\n    while low<=high: # Loop ran until mid is reached\n        num_loops += 1 # adds one loop each time process is repeated\n        mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole #\n\n        if lt[mid] == x:\n            end_time = time.perf_counter_ns() # records time\n            total_time = (end_time - start_time) // 1000 # time in microseconds\n            print(\"Element found after {} loops in {} microseconds\".format(num_loops, total_time)) # prints the results\n            return mid # returns the index value\n\n        elif lt[mid] > x: # if mid was higher than x value, then sets new highest value as mid -1 \n            high = mid -1 \n\n        elif lt[mid] < x:\n            low = mid + 1 # if mid was lower than x, sets the new low as mid + 1\n            \n    end_time = time.perf_counter_ns()\n    total_time = (end_time - start_time) // 1000 \n    print(\"Element not found after {} loops in {} microseconds\".format(num_loops, total_time)) # prints the results\n    return \"Your number wasn't found :(\"\n\n\nlt = list(range(1, 10001)) # list with numbers 1-10000\n\nx = 149 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on)\n\nbinary_search(lt, x) # runs procedure\n\n\n\n\n\nUse the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do.\nWrite code to get the computer to run forever. Check this example if you need help, but please come up with your own idea."
  },
  {
    "objectID": "posts/2022-9-01-dictionaries.html",
    "href": "posts/2022-9-01-dictionaries.html",
    "title": "Fun with dictionaries",
    "section": "",
    "text": "# First attempts at a simple question and answer program using dictionaries.\n\nf = {\"players\":\"11 players on the field\",\n    \"lineman\": \"The smartest players on the field\",\n    \"quarterback\": \"The dude who throws the ball\"\n    \"linebacker\": \"They bliz a lot\"\n}\nprint(f[input(\"query?\")])\n\n# This could probably be expanded more. But it doesn't include interation which the assignment requires.\n\nThe smartest players on the field\n\n\n\nplayers = []\nplayers.append({\n    \"name\": \"Khalid Farah\",\n    \"weight\": 195, #Weight is in pounds\n    \"positions\": [\"linebacker\"]\n})\n\nplayers.append({\n    \"name\": \"Jeffrey Fonseca\",\n    \"weight\": 200,\n    \"positions\": [\"Offensive lineman\", \"Defensive Lineman\"]\n})\n\nfor p in players:\n    print(p[\"name\"], \"\\n\")\n\n# technically, this is all I need to complete the assignment. However, I may do more.\n\nKhalid Farah \n\nJeffrey Fonseca \n\n\n\n\na = input(\"Which player's stats do you want?\")\nfor p in players:\n    if p[\"name\"] == a:\n        print(\"weight = \",p[\"weight\"],\"pounds \\n\")\n        print(\"Positions played:\", p[\"positions\"])\n\nweight =  195 pounds \n\nPositions played: ['linebacker']\n\n\n\ndict = {}\ndict.update({\"test\":\"value\"})\nprint(dict)\n\n# finally got this working. Why was this so difficult to figure out.\n\n{'test': 'value'}\n\n\n\npindex = {}\n\nfor p in players:\n    pindex.update({p[\"name\"]: p})\n\nprint(pindex)\n\n# This program creates an index for the list,to make searching faster. \n\n{'Khalid Farah': {'name': 'Khalid Farah', 'weight': 195, 'positions': ['linebacker']}, 'Jeffrey Fonseca': {'name': 'Jeffrey Fonseca', 'weight': 200, 'positions': ['Offensive lineman', 'Defensive Lineman']}}\n\n\n\n# I can recreate the above program  (playerinfo) without the for loop,just call on the index. \n# Right now there is no speed difference, but when working with bigger stores of info, for loops through are tedious\n\na = input(\"player name?\")\n\nprint(\"weight=\",pindex[a][\"weight\"],\"pounds\\n\")\nprint(\"positions=\",pindex[a][\"positions\"])\n\n# maybe creating dictionary of dictionaries would have been easier...\n\nweight= 200 pounds\n\npositions= ['Offensive lineman', 'Defensive Lineman']"
  },
  {
    "objectID": "posts/2023-1-17-Jekyll on Windows and Mac.html",
    "href": "posts/2023-1-17-Jekyll on Windows and Mac.html",
    "title": "Fixing jekyll on windows and macos devices.",
    "section": "",
    "text": "sh <(curl -L https://nixos.org/nix/install) # After this, close and reopen your terminal. That is to reload your shell.\n\nnix-shell -p rubyPackages.ffi bundler\n\nbundle add execjs webrick wdm\n\nbundle install\n\nbundle exec jekyll serve --force_polling --livereload # if on windows\n\nbundle exec jekyll serve # if using macos or linux"
  },
  {
    "objectID": "posts/2023-1-18-Observable JS in Quarto.html",
    "href": "posts/2023-1-18-Observable JS in Quarto.html",
    "title": "Observable Javascript in Quarto",
    "section": "",
    "text": "Do I need to add content or something for it to show up?"
  },
  {
    "objectID": "posts/2023-1-19-calculator.html",
    "href": "posts/2023-1-19-calculator.html",
    "title": "Calculator Starters",
    "section": "",
    "text": "0\n    \n    1\n    2\n    3\n    +\n    \n    4\n    5\n    6\n    -\n    \n    7\n    8\n    9\n    *\n    \n    A/C\n    0\n    .\n    ="
  },
  {
    "objectID": "posts/grades.html",
    "href": "posts/grades.html",
    "title": "Grades and Vocab",
    "section": "",
    "text": "Event\nGrade\n\n\n\n\n1-2\nnever got grades, I would probably say 0.8\n\n\n3-4\nnever got grades , I would probably say 0.8\n\n\n5-7\n0.95\n\n\n9-11\n0.8\n\n\n8 - 10\n1\n\n\n12 - 13\n0.8\n\n\n14 - 15\n0.85"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\nprint(\"hello World\")\n\nhello World"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/cockpit-setup/index.html",
    "href": "posts/cockpit-setup/index.html",
    "title": "Setting up cockpit",
    "section": "",
    "text": "What is cockpit (and similar softwares)\nAmazon lets us have free servers via EC2. The typical way to manage servers is either by sshing in, or using the cloud shell that Amazon (and Oracle) give. However, there are alternative ways to manage servers. One extremely popular example is pteradactyl, a webpage based gui to manage game (usually minecraft). It lets you download game servers as docker containers, run them, stop them, and maybe manage some basic settings, All the things a casual who just wants video games may need. But when I created a free Oracle server, I wanted something more. By this point, I was an experienced linux user, and I wanted more advanced features. So I searched for a more advanced server management tool, like people use on real servers, and I found cockpit.\nCockpit comes with many benefits. The two things I really like however, are that it’s terminal is not laggy at all, unlike the amazon ec2 cloud terminal, and it also offers a gui to manage docker containers.\n\n\nThe installation process\nThe installation process is simple:\nsudo apt install cockpit\nTo start the server, run:\nsudo systemctl enable --now cockpit\nThis sets the cockpit server to start on boot, and it starts it now.\nHowever, the firewall must open ports to allow the cockpit server through. This opens the default ports for the cockpit server. It should be noted that not every version fo linux uses ufw as a firewall, some use other firewalls with different management commands.\nsudo ufw allow 9090\nAnother important thing is to set the password for the default “ubuntu” user account so that you can login to cockpit.\nsudo passwd ubuntu\nIt will ask for the new password twice, not showing what you are typing.\nReboot the computer for the server to start properly, however, this won’t work as the virtual private cloud must have its ports open. I had to do this when I set up cockpit on my Oracle server, so I knew the gist of the steps.\n\n\nOpening EC2’s VPC ports (Also necessary if you want to host servers on ports other than 22, 80, or 443)\nFirst, go to your EC2 vps, where you would normally click connect from, and click on the link under vpc:\n\nThis should bring you up to a screen like this:\n\nClick the security tab, bringing you to a screen like this:\n\nAnd then click on security groups, bringing you to a screen like this:\n\nAnd then click on the “edit inbound rules”\nFinally, you should get something like this:\n\nAdd an item that matches what I have in the third row. That opens the port to allow cockpits server to escape. You may also need to use this page to open other ports if you are hosting servers on nonstandard ports."
  },
  {
    "objectID": "posts/setting-up-kasm/index.html",
    "href": "posts/setting-up-kasm/index.html",
    "title": "Kasmweb setup",
    "section": "",
    "text": "School chromebooks cannot be used for computer science. Due to a content blocking setup that is more restrictive than the Great Firewall of China, school chromebooks cannot install the necessary digital tools for software development.\nCurrently, you must have your own device to be able to participate in computer science classes. Students who are unable to obtain their own device for whatever reason are denied participation.\nAlthough getting the chromebooks unlocked to be able to install software is a complex, potentially legal problem, there are alternatives.\nKasm is a remote desktop software. It runs a computer on a remote server, that can be accessed through a browser, or a chromebook. Because there are no restrictions on what can be installed when using Kasm, it makes it possible to use development tools on a chromebook.\nBelow are my notes and documenation on setting kasm up on a server, taking steps to optimize it for memory usage, allowing people to run more code on less servers, saving money. Currently, Kasm enterprise charges 10 USD per person per month. With the modified steps that I am creating, I anticipate it possible to receive kasm at 5-8 USD per month per 5 people. For example, webdock.io charges 6.29 USD per month for a VPS with 5 GB of ram, which I believe 1 GB of ram more than what I could fit the maximum users of a single community kasm instance on, 5.\nWith such a price differential, kasm will be much, much more affordable to lower income communities and schools. Combined with programs to put chromebooks in the hands of students, computer science will be made more accessible to all.\nRoadblocks/steps:"
  },
  {
    "objectID": "posts/setting-up-kasm/index.html#turns-out-memory-deduplication-is-on-by-default-for-docker-containers",
    "href": "posts/setting-up-kasm/index.html#turns-out-memory-deduplication-is-on-by-default-for-docker-containers",
    "title": "Kasmweb setup",
    "section": "Turns out, memory deduplication is on by default for docker containers",
    "text": "Turns out, memory deduplication is on by default for docker containers\nGithub issue where someone asked about this. The documents linked were very unclear, so I’ll break it down.\nIf you are using overlayfs or aufs, you have memory deduplication. If you are using other storage drivers, you sacrifice memory for more i/o (write/read) performance.\nFrom here:\n\nOn my ubuntu virtual machine, and the AWS ubuntu machine we are working on, Overlay2 is the storage driver:"
  },
  {
    "objectID": "posts/setting-up-kasm/index.html#kernel-same-page-merging",
    "href": "posts/setting-up-kasm/index.html#kernel-same-page-merging",
    "title": "Kasmweb setup",
    "section": "Kernel Same page merging",
    "text": "Kernel Same page merging\nPreviously, I tried instructions from here: https://wiki.openvz.org/KSM_(kernel_same-page_merging). However, I noticed only a minimal space saved using the LD_PRELOAD steps. Not useful.\nI then tried cachyos fork of uksmd: https://github.com/CachyOS/uksmd, a daemon to go through userspace tasks and dedupe them.\nOnly works with a kernel that has the pmadv_ksm() syscall. Exists in most kernels optimized for desktop usage, like linux-zen, linux-liqourix, or pf-kernel (the original creators of uksmd)\nTo check if your currently running kernel has the feature:\n\non Archlinux, check if the files sys_enter_pmadv_ksm and sys_exit_pmadv_ksm exist in /sys/kernel/debug/tracing/events/syscalls (default does not have this feature, but linux-zen does)\non Ubuntu check if lines containing pmadv exist in the file /proc/kallsyms\n\n\n\n\nuksmstats\n\n\nHalf a gig of ram saved on a normal desktop. Expect to see much more when multiple almost identical docker containers are launched. Very useful. It saves a lot of ram. However, there might be a better way for docker, without jumping through hoops.\nDoes cost a miniscule amount of cpu power, but we have more cpu power and less ram on our servers.\nTo install uksmd on ubuntu, you need to switch kernels.\n\nCompiling UKSMD\nSteps to do so on Ubuntu 22 (you must have switched kernels):\nsudo apt-get install debhelper build-essential dh-make meson pkg-conf libprocps-dev libcap-ng-dev\ngit clone https://github.com/insilications/uksmd-clr\nRename the directory to be something compatible with below steps, like uksmd-1 before you cd into it.\nFollow steps from here\ndh_make --createorig\ndh_auto_configure --buildsystem=meson\ndpkg-buildpackage -rfakeroot -us -uc -b\nThe debian package will be build in the directory above the source directory.\nInstall your debian package!\nIf you want the uksmdstats command for monitoring purposes, you can only get it from the cachyos github (or make your own, it’s just a shell script).\nsudo curl https://raw.githubusercontent.com/CachyOS/uksmd/master/uksmdstats -o /usr/bin/uksmdstats\n\n\nSwitching Kernels\nstatus: complete\ncurl 'https://liquorix.net/install-liquorix.sh' | sudo bash from the liqourix kernel website\nI checked if liqourix has the necessary features, and yes it does.\n\n\nWeaker alternative: ksm_preload\ngit clone https://github.com/binfess/ksm_preload\ncmake .\nmake\nsudo make install\nI added LD_PRELOAD=/usr/local/share/ksm_preload/libksm_preload.so to the file /etc/environment\nI haven’t tested the above, but I saw very minimal space saved, only about 0.11 **megabytes* saved, on my desktop. Tests on my sample server are similarly discouraging:\n\nThe above was with 2 kasm sessions open. Nearly useless. Still, every little bit counts, so this will be installed as well. I might package this eventually."
  },
  {
    "objectID": "posts/setting-up-kasm/index.html#zram",
    "href": "posts/setting-up-kasm/index.html#zram",
    "title": "Kasmweb setup",
    "section": "zram",
    "text": "zram\nstatus: immplemented on my personal systems, but not on the ubuntu vm yet.\nTo install zram, sudo apt install systemd-zram-generator\nThen, you can configure zram by editing /etc/systemd/zram-generator.conf\nThis works, but apparently, things in a swap file aren’t deduplicated by uksmd. Rather, zram handles it’s own deduplication, with the compression algorithms. Becuase it must hash pages, this can potentially lead to more cpu usage.\nBecause I don’t know about this, I made yet another reddit post asking about this topic."
  },
  {
    "objectID": "posts/setting-up-kasm/index.html#zswap",
    "href": "posts/setting-up-kasm/index.html#zswap",
    "title": "Kasmweb setup",
    "section": "zswap",
    "text": "zswap\nStatus: Not fully written out yet.\n\nzswap is disabled by default on my ubuntu virtual machine. Odd that both are disabled by default.\nParameters for zswap can be found in /sys/module/zswap/parameters/\nTo set parameters at boot, use kernel boot paremeters, like zswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=20 zswap.zpool=z3fold\nI will need to tinker to see what is the most optimized zswap setup\nzswap has it’s own memory deduplication feature, which is enabled by default on both my ubuntu vm and the aws ubuntu server:\nSee above, my comments about zswap’s memory deduplication feature."
  },
  {
    "objectID": "posts/setting-up-kasm/index.html#nix-installation-in-the-dockerfile",
    "href": "posts/setting-up-kasm/index.html#nix-installation-in-the-dockerfile",
    "title": "Kasmweb setup",
    "section": "Nix installation in the dockerfile",
    "text": "Nix installation in the dockerfile\nRUN apt update -y && apt install -y curl xz-utils \\\n  && curl -L https://nixos.org/nix/install -o nix-install.sh \\\n  && chmod +x nix-install.sh \\\n  && ./nix-install.sh --daemon --yes \\\n  && rm nix-install.sh \\\n  && apt autoremove -y && apt clean -y\nPut this somewhere in the dockerfile. I will likely have it at the beginning of the dockerfile for the core image generation."
  }
]